'use client'

import React, { useState, useRef, useEffect } from 'react'
import { Send, Mic, MicOff, Volume2, VolumeX, Bot, User, Loader2 } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { ScrollArea } from '@/components/ui/scroll-area'
import { useLanguage } from '@/hooks/useLanguage'
import { geminiChat, checkGeminiServices, playTTSAudio, type ChatMessage } from '@/gemini-api'
import { getLanguageDisplayName } from '@/utils/languageDetection'

interface Message {
    id: string
    type: 'user' | 'bot'
    content: string
    timestamp: Date
    lang: string
}

interface EnhancedChatBotProps {
    voiceEnabled: boolean
    onSpeak: (text: string) => void
}

export function EnhancedChatBot({ voiceEnabled, onSpeak }: EnhancedChatBotProps) {
    const { t, language, isOnline, detectAndSuggestLanguage, autoSetLanguageFromInput } = useLanguage()
    const [messages, setMessages] = useState<Message[]>([])
    const [isInitialized, setIsInitialized] = useState(false)
    const [inputValue, setInputValue] = useState('')
    const [isLoading, setIsLoading] = useState(false)
    const [isListening, setIsListening] = useState(false)
    const [voiceSupported, setVoiceSupported] = useState(false)
    const [serviceStatus, setServiceStatus] = useState({ chatbot: false, speechToText: false, textToSpeech: false })
    const [languageSuggestion, setLanguageSuggestion] = useState<{
        show: boolean;
        detectedLang: string;
        confidence: number;
    }>({ show: false, detectedLang: '', confidence: 0 })
    const scrollAreaRef = useRef<HTMLDivElement>(null)
    const recognitionRef = useRef<any>(null)

    // Initialize speech recognition and update language
    useEffect(() => {
        if (typeof window !== 'undefined' && ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
            const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition
            recognitionRef.current = new SpeechRecognition()

            recognitionRef.current.continuous = false
            recognitionRef.current.interimResults = false
            recognitionRef.current.lang = getVoiceLang(language)

            recognitionRef.current.onresult = (event: any) => {
                const transcript = event.results[0][0].transcript
                setInputValue(transcript)
                setIsListening(false)
            }

            recognitionRef.current.onerror = (event: any) => {
                console.error('Speech recognition error:', event.error)
                setIsListening(false)
            }

            recognitionRef.current.onend = () => {
                setIsListening(false)
            }

            setVoiceSupported(true)
        }

        // Update language for existing recognition instance
        if (recognitionRef.current) {
            recognitionRef.current.lang = getVoiceLang(language)
        }
    }, [language])

    // Scroll to bottom when new messages arrive
    useEffect(() => {
        if (scrollAreaRef.current) {
            scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
        }
    }, [messages])

    // Add welcome message on mount only
    useEffect(() => {
        const services = checkGeminiServices()
        setServiceStatus(services)

        // Only add welcome message if no messages exist (first mount)
        if (messages.length === 0 && !isInitialized) {
            const welcomeMessage: Message = {
                id: '1',
                type: 'bot',
                content: services.chatbot
                    ? language === 'hi'
                        ? `ЁЯМ╛ рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рд╕реНрдорд╛рд░реНрдЯ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред

тЬи **рдирдИ рд╕реБрд╡рд┐рдзрд╛**: рдЕрдм рдореИрдВ рдЖрдкрдХреА рднрд╛рд╖рд╛ рдХреЛ рд╕рдордЭрдХрд░ рдЙрд╕реА рдореЗрдВ рдЬрд╡рд╛рдм рджреВрдВрдЧрд╛!

ЁЯТм рдЖрдк рдореБрдЭрд╕реЗ рдХрд┐рд╕реА рднреА рднрд╛рд╖рд╛ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:
тАв рд╣рд┐рдВрджреА рдореЗрдВ: "рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдХреИрд╕реЗ рдХрд░реЗрдВ?"
тАв English рдореЗрдВ: "How to grow wheat?"
тАв родрооро┐ро┤рпН рдореЗрдВ: "роХрпЛродрпБроорпИ ро╡ро┐ро╡роЪро╛ропроорпН роОрокрпНрокроЯро┐?"

ЁЯЪА рдмрд╕ рдЯрд╛рдЗрдк рдХрд░реЗрдВ, рдореИрдВ рд╕рдордЭ рдЬрд╛рдКрдВрдЧрд╛!`
                        : `ЁЯМ╛ Hello! I'm your intelligent agricultural assistant.

тЬи **New Feature**: I can now understand and respond in your preferred language!

ЁЯТм You can ask me in any language:
тАв English: "How to grow wheat?"
тАв рд╣рд┐рдВрджреА рдореЗрдВ: "рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдХреИрд╕реЗ рдХрд░реЗрдВ?"
тАв родрооро┐ро┤рпН рдореЗрдВ: "роХрпЛродрпБроорпИ ро╡ро┐ро╡роЪро╛ропроорпН роОрокрпНрокроЯро┐?"
тАв р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л: "р░Чр▒Лр░зр▒Бр░о р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В р░Ор░▓р░╛?"

ЁЯЪА Just type in your preferred language, I'll understand!`
                    : language === 'hi'
                        ? `рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред ЁЯМ╛

тЪая╕П рдиреЛрдЯ: рдмреЗрд╣рддрд░ AI рд╕реБрд╡рд┐рдзрд╛рдУрдВ рдХреЗ рд▓рд┐рдП Gemini API key рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред 

ЁЯУЦ рд╕реЗрдЯрдЕрдк рдЧрд╛рдЗрдб рджреЗрдЦреЗрдВ: GEMINI_SETUP.md рдлрд╛рдЗрд▓
ЁЯФЧ рдореБрдлреНрдд API key рдкрд╛рдПрдВ: https://makersuite.google.com/app/apikey

рдЕрднреА рднреА рдореИрдВ рдмреБрдирд┐рдпрд╛рджреА рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рджреЗ рд╕рдХрддрд╛ рд╣реВрдВ! ЁЯТк`
                        : `Hello! I'm your agricultural assistant. ЁЯМ╛

тЪая╕П Note: For enhanced AI features, Gemini API key is required.

ЁЯУЦ Setup Guide: Check GEMINI_SETUP.md file
ЁЯФЧ Get free API key: https://makersuite.google.com/app/apikey

I can still provide basic agricultural advice! ЁЯТк`,
                timestamp: new Date(),
                lang: language
            }
            setMessages([welcomeMessage])
            setIsInitialized(true)
        }
    }, []) // Remove language dependency to prevent clearing history

    // Separate effect to update service status when language changes
    useEffect(() => {
        const services = checkGeminiServices()
        setServiceStatus(services)
    }, [language])

    const getVoiceLang = (lang: string): string => {
        const langMap: { [key: string]: string } = {
            'en': 'en-US',
            'hi': 'hi-IN',
            'ta': 'ta-IN',
            'te': 'te-IN',
            'bn': 'bn-IN',
            'gu': 'gu-IN',
            'mr': 'mr-IN',
            'pa': 'pa-IN'
        }
        return langMap[lang] || 'en-US'
    }

    const startVoiceRecognition = () => {
        if (recognitionRef.current && voiceSupported) {
            recognitionRef.current.lang = getVoiceLang(language)
            setIsListening(true)
            recognitionRef.current.start()
        }
    }

    const stopVoiceRecognition = () => {
        if (recognitionRef.current) {
            recognitionRef.current.stop()
            setIsListening(false)
        }
    }

    const generateAIResponse = async (userMessage: string, responseLanguage: string = language): Promise<string> => {
        try {
            // Enhanced: Detect input language for more natural interaction
            const detectedLang = detectAndSuggestLanguage(userMessage).detectedLanguage
            const confidence = detectAndSuggestLanguage(userMessage).confidence

            // Handle code-mixed languages (like Hinglish) intelligently
            const isCodeMixed = confidence < 70 && confidence > 30

            // Use detected language if confidence is high, or use bilingual approach for code-mixed
            let aiResponseLanguage = responseLanguage
            if (confidence > 70 && detectedLang !== 'en') {
                aiResponseLanguage = detectedLang
            } else if (isCodeMixed && (detectedLang === 'hi' || responseLanguage === 'hi')) {
                // For Hinglish or mixed languages, use a bilingual approach
                aiResponseLanguage = 'hi'
            }

            const getSystemMessage = (lang: string) => {
                const messages: Record<string, string> = {
                    hi: `рдЖрдк рднрд╛рд░рддреАрдп рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╣реИрдВред рдЖрдХрд░реНрд╖рдХ рдФрд░ рд╕рдВрд░рдЪрд┐рдд рдЙрддреНрддрд░ рджреЗрдВ:

тЬЕ рд╣рдореЗрд╢рд╛ emoji рд╕реЗ рд╢реБрд░реБрдЖрдд рдХрд░реЗрдВ
ЁЯУЛ рдореБрдЦреНрдп рдмрд┐рдВрджреБрдУрдВ рдХреЛ bullet points рдореЗрдВ рджреЗрдВ
ЁЯТ░ рд▓рд╛рдЧрдд/рдорд╛рддреНрд░рд╛ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ (тВ╣ рдореЗрдВ)
ЁЯПЫя╕П рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХрд╛ рдЙрд▓реНрд▓реЗрдЦ рдХрд░реЗрдВ (PM-KISAN, etc.)
тЪая╕П рд╕реБрд░рдХреНрд╖рд╛ рдЪреЗрддрд╛рд╡рдиреА рдпрджрд┐ рдЖрд╡рд╢реНрдпрдХ рд╣реЛ
ЁЯТб рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЯрд┐рдкреНрд╕ рдХреЗ рд╕рд╛рде рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВ
тАв рд╣рд┐рдВрджреА рдореЗрдВ рд╣реА рдЙрддреНрддрд░

тЬи рд╡рд┐рд╢реЗрд╖: рдЖрдк рдХрд┐рд╕реА рднреА рднрд╛рд╖рд╛ рдореЗрдВ рдкреВрдЫреЗрдВ, рдореИрдВ рд╕рдордЭрдХрд░ рдЬрд╡рд╛рдм рджреВрдВрдЧрд╛ред Hinglish bhi samajh aata hai!`, en: `You are an Indian agricultural expert. Provide ENGAGING and STRUCTURED answers:

тЬЕ Always start with relevant emoji
ЁЯУЛ Use bullet points for main information
ЁЯТ░ Include costs/quantities (in тВ╣)
ЁЯПЫя╕П Reference government schemes (PM-KISAN, etc.)
тЪая╕П Add safety warnings if needed
ЁЯТб End with practical tips
тАв English language only`,
                    ta: `роирпАроЩрпНроХро│рпН роЗроирпНродро┐роп ро╡рпЗро│ро╛рогрпН роиро┐рокрпБрогро░рпН. роХро╡ро░рпНроЪрпНроЪро┐роХро░рооро╛рой рокродро┐ро▓рпН:

тЬЕ emoji роЙроЯройрпН родрпКроЯроЩрпНроХро╡рпБроорпН
ЁЯУЛ bullet points рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
ЁЯТ░ ро╡ро┐ро▓рпИ/роЕро│ро╡рпБ (тВ╣ роЗро▓рпН)
ЁЯПЫя╕П роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпН
ЁЯТб роироЯрпИроорпБро▒рпИ ропрпЛроЪройрпИроХро│рпБроЯройрпН роорпБроЯро┐ро╡рпБ
тАв родрооро┐ро┤ро┐ро▓рпН роороЯрпНроЯрпБроорпН`,
                    te: `р░ор▒Ар░░р▒Б р░нр░╛р░░р░др▒Ар░п р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ир░┐р░кр▒Бр░гр▒Бр░▓р▒Б. р░Жр░Хр░░р▒Нр░╖р░Х р░╕р░ор░╛р░зр░╛р░ир░В:

тЬЕ emoji р░др▒Л р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐
ЁЯУЛ bullet points р░╡р░╛р░бр░Вр░бр░┐
ЁЯТ░ р░╡р░┐р░▓р▒Бр░╡р░▓р▒Б/р░кр░░р░┐р░ор░╛р░гр░╛р░▓р▒Б (тВ╣ р░▓р▒Л)
ЁЯПЫя╕П р░╕р░░р▒Нр░Хр░╛р░░р▒Б р░пр▒Лр░Ьр░ир░▓ р░ир░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐
ЁЯТб р░╡р▒Нр░пр░╡р░╣р░╛р░░р░┐р░Х р░╕р░▓р░╛р░╡р░Вр░др▒Ар░ир░┐
тАв р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░ор░╛р░др▒Нр░░р░ор▒З`,
                    bn: `ржЖржкржирж┐ ржнрж╛рж░рждрзАржпрж╝ ржХрзГрж╖рж┐ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮред ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржЙрждрзНрждрж░:

тЬЕ emoji ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рзБржи
ЁЯУЛ bullet points ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
ЁЯТ░ ржжрж╛ржо/ржкрж░рж┐ржорж╛ржг (тВ╣ ржП)
ЁЯПЫя╕П рж╕рж░ржХрж╛рж░рзА ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзБржи
ЁЯТб ржмрзНржпржмрж╣рж╛рж░рж┐ржХ ржЯрж┐ржкрж╕ ржжрж┐ржи
тАв рж╢рзБржзрзБ ржмрж╛ржВрж▓рж╛ржпрж╝`,
                    gu: `ркдркорлЗ ркнрк╛рк░ркдрлАркп ркХрлГрк╖рк┐ ркирк┐рк╖рлНркгрк╛ркд ркЫрлЛред ркЖркХрк░рлНрк╖ркХ ркЬрк╡рк╛ркм:

тЬЕ emoji ркерлА рк╢рк░рлБ ркХрк░рлЛ
ЁЯУЛ bullet points рк╡рк╛рккрк░рлЛ
ЁЯТ░ ркжрк░/ркорк╛ркдрлНрк░рк╛ (тВ╣ ркорк╛ркВ)
ЁЯПЫя╕П рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ ркЙрк▓рлНрк▓рлЗркЦ ркХрк░рлЛ
ЁЯТб рк╡рлНркпрк╡рк╣рк╛рк░рк┐ркХ рк╕рк▓рк╛рк╣
тАв ркорк╛ркдрлНрк░ ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ`,
                    mr: `рддреБрдореНрд╣реА рднрд╛рд░рддреАрдп рдХреГрд╖реА рддрдЬреНрдЮ рдЖрд╣рд╛рдд. рдЖрдХрд░реНрд╖рдХ рдЙрддреНрддрд░:

тЬЕ emoji рдиреЗ рд╕реБрд░реВ рдХрд░рд╛
ЁЯУЛ bullet points рд╡рд╛рдкрд░рд╛
ЁЯТ░ рдЦрд░реНрдЪ/рдкреНрд░рдорд╛рдг (тВ╣ рдордзреНрдпреЗ)
ЁЯПЫя╕П рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рд╕рд╛рдВрдЧрд╛
ЁЯТб рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕рд▓реНрд▓рд╛
тАв рдлрдХреНрдд рдорд░рд╛рдареАрдд`,
                    pa: `ридрйБри╕рйАриВ ринри╛ри░ридрйА риЦрйЗридрйА риори╛ри╣ри░ ри╣рйЛред рижри┐ри▓риЪри╕рик риЬри╡ри╛рим:

тЬЕ emoji риири╛ри▓ ри╕ри╝рйБри░рйВ риХри░рйЛ
ЁЯУЛ bullet points ри╡ри░ридрйЛ
ЁЯТ░ риХрйАриорид/риори╛ридри░ри╛ (тВ╣ ри╡ри┐рй▒риЪ)
ЁЯПЫя╕П ри╕ри░риХри╛ри░рйА ри╕риХрйАриори╛риВ рижри╛ риЬри╝ри┐риХри░
ЁЯТб ри╡ри┐ри╣ри╛ри░риХ ри╕ри▓ри╛ри╣ри╛риВ
тАв ри╕ри┐ри░рилри╝ рикрй░риЬри╛римрйА ри╡ри┐рй▒риЪ`
                }
                return messages[lang] || messages.en
            }

            const systemMessage = getSystemMessage(aiResponseLanguage)

            // Enhanced context: Include user's input language for better understanding
            const enhancedUserMessage = confidence > 70 && detectedLang !== responseLanguage
                ? `[User is communicating in ${getLanguageName(detectedLang)}] ${userMessage}`
                : isCodeMixed
                    ? `[User is using mixed language/Hinglish] ${userMessage}`
                    : userMessage

            const chatMessages: ChatMessage[] = [
                {
                    role: 'system',
                    content: systemMessage
                },
                {
                    role: 'user',
                    content: enhancedUserMessage
                }
            ]

            const response = await geminiChat({
                model: 'gemini-2.5-flash', // Using Gemini model
                messages: chatMessages,
                temperature: 0.7,
                max_tokens: 300
            }, aiResponseLanguage) // Pass detected/preferred language

            return response.choices[0]?.message?.content || getFallbackResponse(userMessage)
        } catch (error) {
            console.error('AI response error:', error)
            return getFallbackResponse(userMessage)
        }
    }

    const getLanguageName = (lang: string): string => {
        const names: { [key: string]: string } = {
            'hi': 'Hindi',
            'ta': 'Tamil',
            'te': 'Telugu',
            'bn': 'Bengali',
            'gu': 'Gujarati',
            'mr': 'Marathi',
            'pa': 'Punjabi'
        }
        return names[lang] || 'English'
    }

    const getFallbackResponse = (userMessage: string): string => {
        const lowerMessage = userMessage.toLowerCase()

        // Check if Gemini API key is missing
        const services = checkGeminiServices()
        if (!services.chatbot) {
            // Provide detailed agricultural advice even without API key
            if (lowerMessage.includes('wheat') || lowerMessage.includes('рдЧреЗрд╣реВрдВ')) {
                return language === 'hi'
                    ? `ЁЯМ╛ **рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдЧрд╛рдЗрдб**

ЁЯУЕ **рдмреБрд╡рд╛рдИ рдХрд╛ рд╕рдордп:** рдЕрдХреНрдЯреВрдмрд░-рдирд╡рдВрдмрд░
ЁЯМ▒ **рдмреАрдЬ рджрд░:** 100-125 рдХрд┐рд▓реЛ/рд╣реЗрдХреНрдЯреЗрдпрд░
ЁЯТз **рд╕рд┐рдВрдЪрд╛рдИ:** 4-6 рдмрд╛рд░ рдЖрд╡рд╢реНрдпрдХ
ЁЯзк **рдЙрд░реНрд╡рд░рдХ:** NPK 120:60:40
ЁЯжЧ **рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг:** рдиреАрдо рддреЗрд▓ рд╕реНрдкреНрд░реЗ
ЁЯУИ **рдЙрддреНрдкрд╛рджрди:** 25-30 рдХреНрд╡рд┐рдВрдЯрд▓/рд╣реЗрдХреНрдЯреЗрдпрд░

ЁЯТб **рдЯрд┐рдк:** рдорд┐рдЯреНрдЯреА рдкрд░реАрдХреНрд╖рдг рдХрд░рд╛рдирд╛ рдЬрд░реВрд░реА!`
                    : `ЁЯМ╛ **Wheat Cultivation Guide**

ЁЯУЕ **Sowing Time:** October-November
ЁЯМ▒ **Seed Rate:** 100-125 kg/hectare
ЁЯТз **Irrigation:** 4-6 times needed
ЁЯзк **Fertilizer:** NPK 120:60:40
ЁЯжЧ **Pest Control:** Neem oil spray
ЁЯУИ **Expected Yield:** 25-30 quintals/hectare

ЁЯТб **Tip:** Soil testing is essential!`
            }

            if (lowerMessage.includes('rice') || lowerMessage.includes('рдзрд╛рди') || lowerMessage.includes('рдЪрд╛рд╡рд▓')) {
                return language === 'hi'
                    ? `рдЪрд╛рд╡рд▓ рдХреА рдЦреЗрддреА рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ:

ЁЯМ╛ рдмреБрд╡рд╛рдИ: рдЬреВрди-рдЬреБрд▓рд╛рдИ (рдЦрд░реАрдл)
ЁЯТз рдкрд╛рдиреА: рд▓рдЧрд╛рддрд╛рд░ рдЦрдбрд╝реЗ рдкрд╛рдиреА рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛
ЁЯМ▒ рд░реЛрдкрдг: 20-25 рджрд┐рди рдХреА рдкреМрдз
ЁЯзк рдЙрд░реНрд╡рд░рдХ: рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреА рдЕрдзрд┐рдХ рдЖрд╡рд╢реНрдпрдХрддрд╛
ЁЯжЧ рдореБрдЦреНрдп рдХреАрдЯ: рддрдирд╛ рдЫреЗрджрдХ, рдкрддреНрддреА рд▓рдкреЗрдЯрдХ`
                    : `Rice Cultivation Guide:

ЁЯМ╛ Sowing: June-July (Kharif)
ЁЯТз Water: Continuous standing water required
ЁЯМ▒ Transplanting: 20-25 day old seedlings
ЁЯзк Fertilizer: High nitrogen requirement
ЁЯжЧ Major Pests: Stem borer, leaf folder`
            }

            if (lowerMessage.includes('tomato') || lowerMessage.includes('рдЯрдорд╛рдЯрд░')) {
                return language === 'hi'
                    ? `рдЯрдорд╛рдЯрд░ рдХреА рдЦреЗрддреА:

ЁЯНЕ рдмреБрд╡рд╛рдИ: рд╕рд╛рд▓ рднрд░ (рд╕рд┐рдВрдЪрд┐рдд рдХреНрд╖реЗрддреНрд░)
ЁЯМбя╕П рддрд╛рдкрдорд╛рди: 20-25┬░C рдЖрджрд░реНрд╢
ЁЯТз рдЬрд▓ рдкреНрд░рдмрдВрдзрди: рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ рд╕рд░реНрд╡реЛрддреНрддрдо
ЁЯжа рдореБрдЦреНрдп рд░реЛрдЧ: рдЕрдЧреЗрддреА рдЭреБрд▓рд╕рд╛, рдкрдЫреЗрддреА рдЭреБрд▓рд╕рд╛
ЁЯУИ рдЙрддреНрдкрд╛рджрди: 300-500 рдХреНрд╡рд┐рдВрдЯрд▓ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░`
                    : `Tomato Cultivation:

ЁЯНЕ Sowing: Year-round (irrigated areas)
ЁЯМбя╕П Temperature: 20-25┬░C ideal
ЁЯТз Water Management: Drip irrigation best
ЁЯжа Major Diseases: Early blight, late blight
ЁЯУИ Yield: 300-500 quintals/hectare`
            }

            return language === 'hi'
                ? `рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓: ${userMessage}

AI рд╕реБрд╡рд┐рдзрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ, рд▓реЗрдХрд┐рди рдпрд╣рд╛рдБ рдХреБрдЫ рд╕рд╛рдорд╛рдиреНрдп рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рд╣реИ:

тАв рдирд┐рдпрдорд┐рдд рдорд┐рдЯреНрдЯреА рдЬрд╛рдВрдЪ рдХрд░рд╛рдПрдВ
тАв рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ
тАв рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
тАв рдПрдХреАрдХреГрдд рдХреАрдЯ рдкреНрд░рдмрдВрдзрди рдЕрдкрдирд╛рдПрдВ
тАв рдореМрд╕рдо рдЖрдзрд╛рд░рд┐рдд рд╕рд▓рд╛рд╣ рд▓реЗрдВ

рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдЕрдиреНрдп рдЯреВрд▓реНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред`
                : `Your question: ${userMessage}

AI feature unavailable, but here's general agricultural advice:

тАв Conduct regular soil testing
тАв Practice crop rotation
тАв Use organic fertilizers
тАв Implement integrated pest management
тАв Follow weather-based advisories

Use other tools for more specific information.`
        }

        // Basic keyword-based responses for when API is available but fails
        if (lowerMessage.includes('weather') || lowerMessage.includes('rain') || lowerMessage.includes('рдореМрд╕рдо')) {
            return language === 'hi'
                ? 'рдореМрд╕рдо рдХреА рдирд┐рдпрдорд┐рдд рдЬрд╛рдВрдЪ рдХрд░реЗрдВ рдФрд░ рд╕рд┐рдВрдЪрд╛рдИ рдХреА рдпреЛрдЬрдирд╛ рдмрдирд╛рдПрдВред Weather Dashboard рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред'
                : 'Check weather conditions regularly and plan irrigation accordingly. Use the Weather Dashboard.'
        }
        if (lowerMessage.includes('pest') || lowerMessage.includes('insect') || lowerMessage.includes('рдХреАрдЯ')) {
            return language === 'hi'
                ? 'рдлрд╕рд▓реЛрдВ рдореЗрдВ рдХреАрдЯ рдХреА рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВред рдПрдХреАрдХреГрдд рдХреАрдЯ рдкреНрд░рдмрдВрдзрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред Pest Detection рдЯреВрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред'
                : 'Monitor crops regularly for pest activity. Use integrated pest management practices. Try the Pest Detection tool.'
        }
        if (lowerMessage.includes('soil') || lowerMessage.includes('fertilizer') || lowerMessage.includes('рдорд┐рдЯреНрдЯреА')) {
            return language === 'hi'
                ? 'рдирд┐рдпрдорд┐рдд рдорд┐рдЯреНрдЯреА рдкрд░реАрдХреНрд╖рдг рдХрд░рд╛рдПрдВ рдФрд░ рдорд┐рдЯреНрдЯреА рдХреА рд╕реЗрд╣рдд рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЙрд░реНрд╡рд░рдХ рдбрд╛рд▓реЗрдВред Soil Guide рджреЗрдЦреЗрдВред'
                : 'Get soil tested regularly and apply fertilizers based on soil health. Check the Soil Guide.'
        }
        if (lowerMessage.includes('price') || lowerMessage.includes('market') || lowerMessage.includes('рдмрд╛рдЬрд╛рд░')) {
            return language === 'hi'
                ? 'рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рд╕реНрд░реЛрддреЛрдВ рд╕реЗ рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдпреЛрдВ рдХреА рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВред Market Prices рдЯреВрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред'
                : 'Monitor market prices through reliable sources. Use the Market Prices tool.'
        }

        return language === 'hi'
            ? 'рдХреГрд╖рд┐ рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕рд▓рд╛рд╣ рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮреЛрдВ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ рдпрд╛ рд╣рдорд╛рд░реЗ рдЕрдиреНрдп рдЯреВрд▓реНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред'
            : 'Thank you for your agricultural question. For specific advice, please consult with local agricultural experts or use our other tools.'
    }

    const handleSendMessage = async () => {
        if (!inputValue.trim()) return

        // Enhanced: Detect input language for intelligent response
        const inputDetection = detectAndSuggestLanguage(inputValue)
        const detectedLang = inputDetection.detectedLanguage
        const confidence = inputDetection.confidence

        // Use detected language if confidence is high, otherwise use current app language
        const messageLanguage = (confidence > 70 && detectedLang !== 'en') ? detectedLang : language

        // Show language suggestion only for significant language switches
        if (inputDetection.shouldSuggest && confidence > 80 && detectedLang !== language) {
            setLanguageSuggestion({
                show: true,
                detectedLang: detectedLang,
                confidence: confidence
            })
        } else {
            setLanguageSuggestion({ show: false, detectedLang: '', confidence: 0 })
        }

        const userMessage: Message = {
            id: Date.now().toString(),
            type: 'user',
            content: inputValue.trim(),
            timestamp: new Date(),
            lang: detectedLang // Store detected language with message
        }

        setMessages(prev => [...prev, userMessage])
        setInputValue('')
        setIsLoading(true)

        try {
            // Generate AI response in the detected/preferred language
            const aiResponse = await generateAIResponse(userMessage.content, messageLanguage)

            const botMessage: Message = {
                id: (Date.now() + 1).toString(),
                type: 'bot',
                content: aiResponse,
                timestamp: new Date(),
                lang: messageLanguage // AI responds in the same language
            }

            setMessages(prev => [...prev, botMessage])

            // Manual speech output - only speak when user clicks the speech button
            if (voiceEnabled && aiResponse) {
                // Don't auto-speak, let user control when to hear the response
                // onSpeak(aiResponse)
            }
        } catch (error) {
            console.error('Error generating response:', error)
            const errorMessage: Message = {
                id: (Date.now() + 1).toString(),
                type: 'bot',
                content: 'Sorry, I encountered an error. Please try again.',
                timestamp: new Date(),
                lang: language
            }
            setMessages(prev => [...prev, errorMessage])
        } finally {
            setIsLoading(false)
        }
    }

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault()
            handleSendMessage()
        }
    }

    const getQuickQuestions = () => {
        const questions: Record<string, string[]> = {
            hi: [
                'рдЗрд╕ рдореМрд╕рдо рдореЗрдВ рдХреМрди рд╕реА рдлрд╕рд▓ рдмреЛрдиреА рдЪрд╛рд╣рд┐рдП?',
                'рдХреАрдЯ рдиреБрдХрд╕рд╛рди рд╕реЗ рдХреИрд╕реЗ рдмрдЪрд╛рд╡ рдХрд░реЗрдВ?',
                'рдЧреЗрд╣реВрдВ рдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рдЙрд░реНрд╡рд░рдХ?',
                'рдЪрд╛рд╡рд▓ рдХреА рдХрдЯрд╛рдИ рдХрдм рдХрд░реЗрдВ?',
                'рдХрдкрд╛рд╕ рдХреА рд╕рд┐рдВрдЪрд╛рдИ рдХрд╛ рд╕рдордп?',
                'рдорд┐рдЯреНрдЯреА рддреИрдпрд╛рд░ рдХрд░рдиреЗ рдХреЗ рддрд░реАрдХреЗ?'
            ],
            en: [
                'What crops should I plant this season?',
                'How to prevent pest damage?',
                'Best fertilizer for wheat?',
                'When to harvest rice?',
                'Irrigation schedule for cotton?',
                'Soil preparation tips?'
            ],
            ta: [
                'роЗроирпНрод рокро░рпБро╡родрпНродро┐ро▓рпН роОроирпНрод рокропро┐ро░рпН роироЯро╡рпЗрогрпНроЯрпБроорпН?',
                'рокрпВроЪрпНроЪро┐ родро╛роХрпНроХрпБродро▓рпИ роОрокрпНрокроЯро┐ родроЯрпБрокрпНрокродрпБ?',
                'роХрпЛродрпБроорпИроХрпНроХрпБ роЪро┐ро▒роирпНрод роЙро░роорпН?',
                'роирпЖро▓рпН роЕро▒рпБро╡роЯрпИ роОрокрпНрокрпЛродрпБ?',
                'рокро░рпБродрпНродро┐роХрпНроХрпБ роирпАро░рпНрокрпНрокро╛роЪрой роЕроЯрпНроЯро╡рогрпИ?',
                'роорогрпН родропро╛ро░ро┐рокрпНрокрпБ ро╡ро┤ро┐роХро│рпН?'
            ],
            te: [
                'р░И р░╕р▒Ар░Ьр░ир▒НтАМр░▓р▒Л р░П р░кр░Вр░Я р░╡р▒Зр░пр░╛р░▓р░┐?',
                'р░кр▒Бр░░р▒Бр░Чр▒Бр░▓ р░ир░╖р▒Нр░Яр░╛р░ир▒Нр░ир░┐ р░Ор░▓р░╛ р░ир░┐р░╡р░╛р░░р░┐р░Вр░Ър░╛р░▓р░┐?',
                'р░Чр▒Лр░зр▒Бр░ор░Хр▒Б р░Йр░др▒Нр░др░о р░Ор░░р▒Бр░╡р▒Б?',
                'р░╡р░░р░┐р░ир░┐ р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░Хр▒Лр░пр░╛р░▓р░┐?',
                'р░кр░др▒Нр░др░┐р░Хр░┐ р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ р░Хр░╛р░▓р░Хр▒Нр░░р░ор░В?',
                'р░ор░Яр▒Нр░Яр░┐ р░др░пр░╛р░░р▒А р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б?'
            ],
            bn: [
                'ржПржЗ ржорзМрж╕рзБржорзЗ ржХрзЛржи ржлрж╕рж▓ ржмржкржи ржХрж░ржм?',
                'ржкрзЛржХрж╛рж░ ржХрзНрж╖рждрж┐ ржерзЗржХрзЗ ржХрзАржнрж╛ржмрзЗ рж░ржХрзНрж╖рж╛ ржкрж╛ржм?',
                'ржЧржорзЗрж░ ржЬржирзНржп рж╕рзЗрж░рж╛ рж╕рж╛рж░?',
                'ржзрж╛ржи ржХрж╛ржЯрж╛рж░ рж╕ржоржпрж╝ ржХржЦржи?',
                'рждрзБрж▓рж╛рж░ рж╕рзЗржЪрзЗрж░ рж╕ржоржпрж╝рж╕рзВржЪрзА?',
                'ржорж╛ржЯрж┐ ржкрзНрж░рж╕рзНрждрзБрждрж┐рж░ ржЙржкрж╛ржпрж╝?'
            ],
            gu: [
                'ркЖ ркорлЛрк╕ркоркорк╛ркВ ркХркпрк╛ рккрк╛ркХ рк╡рк╛рк╡рк╡рк╛?',
                'ркЬркВркдрлБркирк╛ ркирлБркХрк╕рк╛ркиркерлА ркХрлЗрк╡рлА рк░рлАркдрлЗ ркмркЪрк╛рк╡?',
                'ркШркЙркВ ркорк╛ркЯрлЗ рк╢рлНрк░рлЗрк╖рлНрка ркЦрк╛ркдрк░?',
                'ркЪрлЛркЦрк╛ркирлА ркХрк╛рккркгрлА ркХрлНркпрк╛рк░рлЗ?',
                'ркХрккрк╛рк╕ ркорк╛ркЯрлЗ рк╕рк┐ркВркЪрк╛ркИркирлБркВ рк╢рлЗркбрлНркпрлВрк▓?',
                'ркорк╛ркЯрлА ркдрлИркпрк╛рк░ ркХрк░рк╡рк╛ркирлА ркЯрк┐рккрлНрк╕?'
            ],
            mr: [
                'рдпрд╛ рд╣рдВрдЧрд╛рдорд╛рдд рдХреЛрдгрддреЗ рдкреАрдХ рдкреЗрд░рд╛рд╡реЗ?',
                'рдХреАрдб рдиреБрдХрд╕рд╛рдиреАрдкрд╛рд╕реВрди рдХрд╕реЗ рдмрдЪрд╛рд╡?',
                'рдЧрд╣реВрд╕рд╛рдареА рд╕рд░реНрд╡реЛрддреНрддрдо рдЦрдд?',
                'рднрд╛рдд рдХрд╛рдкрдгреАрдЪреА рд╡реЗрд│ рдХрдзреА?',
                'рдХрд╛рдкрд╕рд╛рдЪреНрдпрд╛ рдкрд╛рдгреНрдпрд╛рдЪреЗ рд╡реЗрд│рд╛рдкрддреНрд░рдХ?',
                'рдЬрдореАрди рддрдпрд╛рд░ рдХрд░рдгреНрдпрд╛рдЪреНрдпрд╛ рдЯрд┐рдкрд╛?'
            ],
            pa: [
                'риЗри╕ ри╕рйАриЬри╝рии ри╡ри┐рй▒риЪ риХри┐ри╣рйЬрйА рилри╕ри▓ римрйАриЬригрйА риЪри╛ри╣рйАрижрйА?',
                'риХрйАрйЬри┐риЖриВ рижрйЗ риирйБриХри╕ри╛рии ридрйЛриВ риХри┐ри╡рйЗриВ римриЪри╛риЕ?',
                'риХригриХ ри▓риИ ри╕рин ридрйЛриВ ри╡ризрйАриЖ риЦри╛риж?',
                'риЪри╛ри╡ри▓ рижрйА ри╡ри╛риврйА риХрижрйЛриВ?',
                'риХрикри╛ри╕ ри▓риИ ри╕ри┐рй░риЪри╛риИ рижри╛ ри╕риори╛риВ?',
                'риори┐рй▒риЯрйА ридри┐риЖри░ риХри░рии рижрйЗ ридри░рйАриХрйЗ?'
            ]
        }
        return questions[language] || questions.en
    }

    const quickQuestions = getQuickQuestions()

    return (
        <div className="max-w-4xl mx-auto space-y-6">
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        <Bot className="h-5 w-5" />
                        {t('aiAdvisor')}
                        <Badge variant={isOnline ? 'default' : 'secondary'}>
                            {isOnline ? 'Online' : t('offlineMode')}
                        </Badge>
                        {/* Service Status Badges */}
                        <Badge variant={serviceStatus.chatbot ? 'outline' : 'destructive'} className="text-xs">
                            Chat {serviceStatus.chatbot ? 'тЬУ' : 'тЬЧ'}
                        </Badge>
                        <Badge variant={serviceStatus.speechToText ? 'outline' : 'secondary'} className="text-xs">
                            STT {serviceStatus.speechToText ? 'тЬУ' : 'тЬЧ'}
                        </Badge>
                        <Badge variant={serviceStatus.textToSpeech ? 'outline' : 'secondary'} className="text-xs">
                            TTS {serviceStatus.textToSpeech ? 'тЬУ' : 'тЬЧ'}
                        </Badge>
                    </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    {/* API Key Setup Instructions */}
                    {(() => {
                        const apiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY
                        const isApiKeyValid = apiKey && apiKey.length > 20
                        return !isApiKeyValid ? (
                            <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 mb-4">
                                <div className="flex items-start gap-3">
                                    <div className="bg-yellow-100 dark:bg-yellow-900/50 rounded-full p-1">
                                        <svg className="w-4 h-4 text-yellow-600 dark:text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                                            <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                                        </svg>
                                    </div>
                                    <div className="flex-1">
                                        <h4 className="text-sm font-medium text-yellow-800 dark:text-yellow-200 mb-1">
                                            {language === 'hi' ? 'AI рдЖрджреЗрд╢ рдХреЗ рд▓рд┐рдП API Key рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛' : 'OpenAI API Key Required for AI Features'}
                                        </h4>
                                        <div className="text-xs text-yellow-700 dark:text-yellow-300 space-y-2">
                                            <p>
                                                {language === 'hi'
                                                    ? 'рдкреВрд░реА AI рдХреНрд╖рдорддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП:'
                                                    : 'To enable full AI capabilities:'
                                                }
                                            </p>
                                            <ol className="list-decimal list-inside space-y-1 ml-2">
                                                <li>{language === 'hi' ? 'OpenAI рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдЬрд╛рдПрдВ' : 'Visit OpenAI website'}</li>
                                                <li>{language === 'hi' ? 'API key рдмрдирд╛рдПрдВ' : 'Generate an API key'}</li>
                                                <li>{language === 'hi' ? '.env.local рдлрд╛рдЗрд▓ рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ' : 'Add to .env.local file'}</li>
                                                <li>{language === 'hi' ? 'рд╕рд░реНрд╡рд░ рд░реАрд╕реНрдЯрд╛рд░реНрдЯ рдХрд░реЗрдВ' : 'Restart the server'}</li>
                                            </ol>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ) : null
                    })()}

                    {/* Language Detection Suggestion */}
                    {languageSuggestion.show && (
                        <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-4">
                            <div className="flex items-start gap-3">
                                <div className="bg-blue-100 dark:bg-blue-900/50 rounded-full p-1">
                                    <svg className="w-4 h-4 text-blue-600 dark:text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clipRule="evenodd" />
                                    </svg>
                                </div>
                                <div className="flex-1">
                                    <h4 className="text-sm font-medium text-blue-800 dark:text-blue-200 mb-1">
                                        {t('languageSwitchSuggestion')}
                                    </h4>
                                    <p className="text-xs text-blue-700 dark:text-blue-300 mb-3">
                                        {t('languageDetectedMessage')
                                            .replace('{language}', getLanguageName(languageSuggestion.detectedLang))
                                            .replace('{confidence}', languageSuggestion.confidence.toString())
                                        }
                                    </p>
                                    <div className="flex gap-2">
                                        <Button
                                            size="sm"
                                            onClick={() => {
                                                autoSetLanguageFromInput(inputValue || messages[messages.length - 2]?.content || '')
                                                setLanguageSuggestion({ show: false, detectedLang: '', confidence: 0 })
                                            }}
                                            className="text-xs h-7"
                                        >
                                            {t('yesSwitch')}
                                        </Button>
                                        <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={() => setLanguageSuggestion({ show: false, detectedLang: '', confidence: 0 })}
                                            className="text-xs h-7"
                                        >
                                            {t('noThanks')}
                                        </Button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                    {/* Chat Messages */}
                    <ScrollArea ref={scrollAreaRef} className="h-96 w-full border rounded-lg p-4">
                        <div className="space-y-4">
                            {messages.map((message) => (
                                <div
                                    key={message.id}
                                    className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                                >
                                    <div className={`flex gap-2 max-w-[80%] ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                                        <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${message.type === 'user'
                                            ? 'bg-blue-500 text-white'
                                            : 'bg-green-500 text-white'
                                            }`}>
                                            {message.type === 'user' ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                                        </div>
                                        <div className={`p-3 rounded-lg ${message.type === 'user'
                                            ? 'bg-blue-500 text-white'
                                            : 'bg-gray-100 dark:bg-gray-700'
                                            }`}>
                                            {message.type === 'bot' ? (
                                                <div
                                                    className="text-sm prose prose-sm max-w-none dark:prose-invert"
                                                    dangerouslySetInnerHTML={{
                                                        __html: message.content
                                                            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                                                            .replace(/\n/g, '<br/>')
                                                            .replace(/тАв /g, '<br/>тАв ')
                                                            .replace(/ЁЯТ░ /g, '<br/>ЁЯТ░ ')
                                                            .replace(/ЁЯМ▒ /g, '<br/>ЁЯМ▒ ')
                                                            .replace(/ЁЯТз /g, '<br/>ЁЯТз ')
                                                            .replace(/ЁЯзк /g, '<br/>ЁЯзк ')
                                                            .replace(/ЁЯжЧ /g, '<br/>ЁЯжЧ ')
                                                            .replace(/ЁЯУИ /g, '<br/>ЁЯУИ ')
                                                            .replace(/ЁЯТб /g, '<br/>ЁЯТб ')
                                                            .replace(/ЁЯУЕ /g, '<br/>ЁЯУЕ ')
                                                            .replace(/тЪая╕П /g, '<br/>тЪая╕П ')
                                                            .replace(/ЁЯПЫя╕П /g, '<br/>ЁЯПЫя╕П ')
                                                            .replace(/ЁЯУЛ /g, '<br/>ЁЯУЛ ')
                                                    }}
                                                />
                                            ) : (
                                                <p className="text-sm">{message.content}</p>
                                            )}
                                            <div className="flex justify-between items-center mt-1">
                                                <div className="flex items-center gap-2">
                                                    <p className="text-xs opacity-70">
                                                        {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                                    </p>
                                                    {/* Language indicator for interactive feedback */}
                                                    {message.lang && message.lang !== 'en' && (
                                                        <span className="text-xs opacity-60 bg-white/20 px-1 rounded">
                                                            {getLanguageName(message.lang)}
                                                        </span>
                                                    )}
                                                </div>
                                                {/* Speech button for bot messages */}
                                                {message.type === 'bot' && voiceEnabled && (
                                                    <Button
                                                        size="sm"
                                                        variant="ghost"
                                                        className="h-6 w-6 p-0 ml-2"
                                                        onClick={() => onSpeak(message.content)}
                                                        title="Read aloud"
                                                    >
                                                        <Volume2 className="h-3 w-3" />
                                                    </Button>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            ))}

                            {isLoading && (
                                <div className="flex justify-start">
                                    <div className="flex gap-2">
                                        <div className="w-8 h-8 rounded-full bg-green-500 text-white flex items-center justify-center">
                                            <Bot className="h-4 w-4" />
                                        </div>
                                        <div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">
                                            <div className="flex items-center gap-2">
                                                <Loader2 className="h-4 w-4 animate-spin" />
                                                <span className="text-sm">{t('thinkingAI')}</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>
                    </ScrollArea>

                    {/* Quick Questions - Enhanced with multilingual examples */}
                    <div className="space-y-2">
                        <p className="text-sm font-medium">{t('quickQuestions')}:</p>
                        <div className="flex flex-wrap gap-2">
                            {quickQuestions.slice(0, 2).map((question, index) => (
                                <Button
                                    key={index}
                                    variant="outline"
                                    size="sm"
                                    onClick={() => setInputValue(question)}
                                    className="text-xs"
                                >
                                    {question}
                                </Button>
                            ))}
                            {/* Add cross-language examples for demonstration */}
                            {language === 'en' && (
                                <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => setInputValue('рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдХреИрд╕реЗ рдХрд░реЗрдВ?')}
                                    className="text-xs bg-blue-50 border-blue-200"
                                    title="Try asking in Hindi"
                                >
                                    ЁЯЗоЁЯЗ│ рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдХреИрд╕реЗ рдХрд░реЗрдВ?
                                </Button>
                            )}
                            {language === 'hi' && (
                                <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => setInputValue('How to grow rice?')}
                                    className="text-xs bg-blue-50 border-blue-200"
                                    title="Try asking in English"
                                >
                                    ЁЯЗ║ЁЯЗ╕ How to grow rice?
                                </Button>
                            )}
                        </div>
                        <p className="text-xs text-gray-500 mt-2">
                            ЁЯТб {language === 'hi'
                                ? 'рдЯрд┐рдк: рдЖрдк рдХрд┐рд╕реА рднреА рднрд╛рд╖рд╛ рдореЗрдВ рд╕рд╡рд╛рд▓ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ, рдореИрдВ рд╕рдордЭ рдЬрд╛рдКрдВрдЧрд╛!'
                                : 'Tip: Ask questions in any language - I\'ll understand and respond accordingly!'}
                        </p>
                    </div>

                    {/* Input Area */}
                    <div className="flex gap-2">
                        <div className="flex-1 relative">
                            <Input
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                onKeyPress={handleKeyPress}
                                placeholder={t('typeMessage')}
                                disabled={isLoading}
                                className="pr-16"
                            />
                            {voiceSupported && (
                                <Button
                                    size="lg"
                                    variant="ghost"
                                    className="absolute right-2 top-1/2 transform -translate-y-1/2 h-10 w-10 p-0"
                                    onClick={isListening ? stopVoiceRecognition : startVoiceRecognition}
                                    disabled={isLoading}
                                >
                                    {isListening ? (
                                        <MicOff className="h-6 w-6 text-red-500" />
                                    ) : (
                                        <Mic className="h-6 w-6 text-blue-500" />
                                    )}
                                </Button>
                            )}
                        </div>
                        <Button
                            onClick={handleSendMessage}
                            disabled={isLoading || !inputValue.trim()}
                            size="sm"
                        >
                            <Send className="h-4 w-4" />
                        </Button>
                    </div>

                    {/* Voice Controls */}
                    {voiceEnabled && (
                        <div className="flex items-center justify-between p-2 bg-green-50 dark:bg-green-900/20 rounded-lg">
                            <div className="flex items-center gap-2">
                                <Volume2 className="h-4 w-4 text-green-600" />
                                <span className="text-sm text-green-600">{t('voiceEnabled')}</span>
                            </div>
                            <Badge variant="secondary">{getLanguageName(language)}</Badge>
                        </div>
                    )}

                    {isListening && (
                        <div className="flex items-center justify-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                            <div className="flex items-center gap-2">
                                <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" />
                                <span className="text-sm text-blue-600">Listening...</span>
                            </div>
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    )
}