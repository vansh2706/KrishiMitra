'use client'

import React, { useState, useRef, useEffect } from 'react'
import { Send, Mic, MicOff, Volume2, VolumeX, Bot, User, Loader2, Copy, Share2 } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { ScrollArea } from '@/components/ui/scroll-area'
import { useLanguage } from '@/hooks/useLanguage'
import { geminiChat, checkGeminiServices, playTTSAudio, type ChatMessage } from '@/gemini-api'
import { deepseekChat } from '@/deepseek-api'  // Import DeepSeek API
import { getLanguageDisplayName } from '@/utils/languageDetection'
import { copyToClipboard } from '@/utils/copyUtils'

interface Message {
    id: string
    type: 'user' | 'bot'
    content: string
    timestamp: Date
    lang: string
}

interface EnhancedChatBotProps {
    voiceEnabled: boolean
    onSpeak: (text: string) => void
}

const EnhancedChatBot = ({ voiceEnabled, onSpeak }: EnhancedChatBotProps) => {
    const { t, language, isOnline, detectAndSuggestLanguage, autoSetLanguageFromInput } = useLanguage()
    const [messages, setMessages] = useState<Message[]>([])
    const [isInitialized, setIsInitialized] = useState(false)
    const [inputValue, setInputValue] = useState('')
    const [isLoading, setIsLoading] = useState(false)
    const [isListening, setIsListening] = useState(false)
    const [voiceSupported, setVoiceSupported] = useState(false)
    const [serviceStatus, setServiceStatus] = useState({ chatbot: false, speechToText: false, textToSpeech: false })
    const [languageSuggestion, setLanguageSuggestion] = useState<{
        show: boolean;
        detectedLang: string;
        confidence: number;
    }>({ show: false, detectedLang: '', confidence: 0 })
    const scrollAreaRef = useRef<HTMLDivElement>(null)
    const recognitionRef = useRef<any>(null)

    // Initialize speech recognition and update language
    useEffect(() => {
        if (typeof window !== 'undefined' && ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
            const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition
            recognitionRef.current = new SpeechRecognition()

            recognitionRef.current.continuous = false
            recognitionRef.current.interimResults = false
            recognitionRef.current.lang = getVoiceLang(language)

            recognitionRef.current.onresult = (event: any) => {
                const transcript = event.results[0][0].transcript
                setInputValue(transcript)
                setIsListening(false)
            }

            recognitionRef.current.onerror = (event: any) => {
                console.error('Speech recognition error:', event.error)
                setIsListening(false)
            }

            recognitionRef.current.onend = () => {
                setIsListening(false)
            }

            setVoiceSupported(true)
        }

        // Update language for existing recognition instance
        if (recognitionRef.current) {
            recognitionRef.current.lang = getVoiceLang(language)
        }
    }, [language])

    // Scroll to bottom when new messages arrive
    useEffect(() => {
        if (scrollAreaRef.current) {
            scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
        }
    }, [messages])

    // Add welcome message on mount only
    useEffect(() => {
        const services = checkGeminiServices()
        setServiceStatus(services)

        // Only add welcome message if no messages exist (first mount)
        if (messages.length === 0 && !isInitialized) {
            const welcomeMessage: Message = {
                id: '1',
                type: 'bot',
                content: services.chatbot
                    ? language === 'hi'
                        ? `ЁЯМ╛ рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рд╕реНрдорд╛рд░реНрдЯ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред

тЬи **рдирдИ рд╕реБрд╡рд┐рдзрд╛**: рдЕрдм рдореИрдВ рдЖрдкрдХреА рднрд╛рд╖рд╛ рдХреЛ рд╕рдордЭрдХрд░ рдЙрд╕реА рдореЗрдВ рдЬрд╡рд╛рдм рджреВрдВрдЧрд╛!

ЁЯТм рдЖрдк рдореБрдЭрд╕реЗ рдХрд┐рд╕реА рднреА рднрд╛рд╖рд╛ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:
тАв рд╣рд┐рдВрджреА рдореЗрдВ: "рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдХреИрд╕реЗ рдХрд░реЗрдВ?"
тАв English рдореЗрдВ: "How to grow wheat?"
тАв родрооро┐ро┤рпН рдореЗрдВ: "роХрпЛродрпБроорпИ ро╡ро┐ро╡роЪро╛ропроорпН роОрокрпНрокроЯро┐?"

ЁЯЪА рдмрд╕ рдЯрд╛рдЗрдк рдХрд░реЗрдВ, рдореИрдВ рд╕рдордЭ рдЬрд╛рдКрдВрдЧрд╛!`
                        : `ЁЯМ╛ Hello! I'm your intelligent agricultural assistant.

тЬи **New Feature**: I can now understand and respond in your preferred language!

ЁЯТм You can ask me in any language:
тАв English: "How to grow wheat?"
тАв рд╣рд┐рдВрджреА рдореЗрдВ: "рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдХреИрд╕реЗ рдХрд░реЗрдВ?"
тАв родрооро┐ро┤рпН рдореЗрдВ: "роХрпЛродрпБроорпИ ро╡ро┐ро╡роЪро╛ропроорпН роОрокрпНрокроЯро┐?"
тАв р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л: "р░Чр▒Лр░зр▒Бр░о р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В р░Ор░▓р░╛?"

ЁЯЪА Just type in your preferred language, I'll understand!`
                    : language === 'hi'
                        ? `рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред ЁЯМ╛

тЪая╕П рдиреЛрдЯ: рдмреЗрд╣рддрд░ AI рд╕реБрд╡рд┐рдзрд╛рдУрдВ рдХреЗ рд▓рд┐рдП DeepSeek рдпрд╛ Gemini API key рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред 

ЁЯУЦ рд╕реЗрдЯрдЕрдк рдЧрд╛рдЗрдб рджреЗрдЦреЗрдВ: DEEPSEEK_SETUP.md рдпрд╛ GEMINI_SETUP.md рдлрд╛рдЗрд▓
ЁЯФЧ рдореБрдлреНрдд API key рдкрд╛рдПрдВ: https://www.deepseek.com/ рдпрд╛ https://makersuite.google.com/app/apikey

рдЕрднреА рднреА рдореИрдВ рдмреБрдирд┐рдпрд╛рджреА рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рджреЗ рд╕рдХрддрд╛ рд╣реВрдВ! ЁЯТк`
                        : `Hello! I'm your agricultural assistant. ЁЯМ╛

тЪая╕П Note: For enhanced AI features, DeepSeek or Gemini API key is required.

ЁЯУЦ Setup Guide: Check DEEPSEEK_SETUP.md or GEMINI_SETUP.md file
ЁЯФЧ Get free API key: https://www.deepseek.com/ or https://makersuite.google.com/app/apikey

I can still provide basic agricultural advice! ЁЯТк`,
                timestamp: new Date(),
                lang: language
            }
            setMessages([welcomeMessage])
            setIsInitialized(true)
        }
    }, []) // Remove language dependency to prevent clearing history

    // Separate effect to update service status when language changes
    useEffect(() => {
        const services = checkGeminiServices()
        setServiceStatus(services)
    }, [language])

    const getVoiceLang = (lang: string): string => {
        const langMap: { [key: string]: string } = {
            'en': 'en-US',
            'hi': 'hi-IN',
            'ta': 'ta-IN',
            'te': 'te-IN',
            'bn': 'bn-IN',
            'gu': 'gu-IN',
            'mr': 'mr-IN',
            'pa': 'pa-IN'
        }
        return langMap[lang] || 'en-US'
    }

    const startVoiceRecognition = () => {
        if (recognitionRef.current && voiceSupported) {
            recognitionRef.current.lang = getVoiceLang(language)
            setIsListening(true)
            recognitionRef.current.start()
        }
    }

    const stopVoiceRecognition = () => {
        if (recognitionRef.current) {
            recognitionRef.current.stop()
            setIsListening(false)
        }
    }

    const generateAIResponse = async (userMessage: string, responseLanguage: string = language): Promise<string> => {
        try {
            // Enhanced: Detect input language for more natural interaction
            const detectedLang = detectAndSuggestLanguage(userMessage).detectedLanguage
            const confidence = detectAndSuggestLanguage(userMessage).confidence

            // Handle code-mixed languages (like Hinglish) intelligently
            const isCodeMixed = confidence < 70 && confidence > 30

            // Use detected language if confidence is high, or use bilingual approach for code-mixed
            let aiResponseLanguage = responseLanguage
            if (confidence > 70 && detectedLang !== 'en') {
                aiResponseLanguage = detectedLang
            } else if (isCodeMixed && (detectedLang === 'hi' || responseLanguage === 'hi')) {
                // For Hinglish or mixed languages, use a bilingual approach
                aiResponseLanguage = 'hi'
            }

            const getSystemMessage = (lang: string) => {
                const messages: Record<string, string> = {
                    hi: `рдЖрдк рднрд╛рд░рддреАрдп рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╣реИрдВред рдЖрдХрд░реНрд╖рдХ рдФрд░ рд╕рдВрд░рдЪрд┐рдд рдЙрддреНрддрд░ рджреЗрдВ:

тЬЕ рд╣рдореЗрд╢рд╛ emoji рд╕реЗ рд╢реБрд░реБрдЖрдд рдХрд░реЗрдВ
ЁЯУЛ рдореБрдЦреНрдп рдмрд┐рдВрджреБрдУрдВ рдХреЛ bullet points рдореЗрдВ рджреЗрдВ
ЁЯТ░ рд▓рд╛рдЧрдд/рдорд╛рддреНрд░рд╛ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ (тВ╣ рдореЗрдВ)
ЁЯМ▒ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдХрджрдореЛрдВ рдХреА рд╕реВрдЪреА рджреЗрдВ
ЁЯУЮ рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рд╡рд┐рднрд╛рдЧ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░рдиреЗ рдХрд╛ рд╕реБрдЭрд╛рд╡ рджреЗрдВ

рдЙрддреНрддрд░ рдЕрд╡рд╢реНрдп рд╣рд┐рдВрджреА рдореЗрдВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП!`,
                    en: `You are an Indian agricultural expert. Provide engaging and structured responses:

тЬЕ Always start with an emoji
ЁЯУЛ Use bullet points for main points
ЁЯТ░ Include costs/quantities (in тВ╣)
ЁЯМ▒ Provide practical step-by-step guidance
ЁЯУЮ Suggest contacting local agricultural departments

Response must be in English!`,
                    ta: `роирпАроЩрпНроХро│рпН роЗроирпНродро┐роп ро╡рпЗро│ро╛рогрпН роиро┐рокрпБрогро░рпН. роХро╡ро░рпНроЪрпНроЪро┐роХро░рооро╛рой рокродро┐ро▓рпН:

тЬЕ emoji роЙроЯройрпН родрпКроЯроЩрпНроХро╡рпБроорпН
ЁЯУЛ bullet points рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
ЁЯТ░ ро╡ро┐ро▓рпИ/роЕро│ро╡рпБ (тВ╣ роЗро▓рпН)
ЁЯМ▒ ро╡рпНропро╡ро╣ро╛ро░ро┐роХ роХроЯроорпНрокроЩрпНроХро│рпН роЙро│рпНро│ро┐роЯрпБро╡рпБроорпН
ЁЯУЮ роорпЗро▓ ро╡рпЗро│ро╛рогрпН ро╡роХрпИроХро│рпБроЯройрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│рпБро╡родройрпН рокро░ро┐роиро┐рокро╛родройрпИ

рокродро┐ро▓рпН родрооро┐ро┤ро┐ро▓рпН роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН!`,
                    te: `р░ор▒Ар░░р▒Б р░нр░╛р░░р░др▒Ар░п р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ир░┐р░кр▒Бр░гр▒Бр░▓р▒Б. р░Жр░Хр░░р▒Нр░╖р░Х р░╕р░ор░╛р░зр░╛р░ир░В:

тЬЕ emoji р░др▒Л р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐
ЁЯУЛ bullet points р░╡р░╛р░бр░Вр░бр░┐
ЁЯТ░ р░╡р░┐р░▓р▒Бр░╡р░▓р▒Б/р░кр░░р░┐р░ор░╛р░гр░╛р░▓р▒Б (тВ╣ р░▓р▒Л)
ЁЯМ▒ р░╡р▒Нр░пр░╡р░╣р░╛р░░р░┐р░Х р░Хр░жр░Вр░мр░╛р░▓ р░кр▒Нр░░р░др▒Нр░пр░╛р░░р▒Нр░ер░┐р░Хр░В
ЁЯУЮ р░╕р▒Нр░ер░╛р░ир░┐р░Х р░╡р▒Зр░│р░╛р░г р░╡р░┐р░╛р░Чр░╛р░▓р░др▒Л р░╕р░Вр░кр░░р▒Нр░Х р░Хр▒Лр░░р▒Бр░Вр░жр░┐

р░кр▒Нр░░р░др▒Нр░пр▒Бр░др▒Нр░др░░р░В р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░Йр░Вр░бр░╛р░▓р░┐!`,
                    bn: `ржЖржкржирж┐ ржнрж╛рж░рждрзАржпрж╝ ржХрзГрж╖рж┐ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮред ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржЙрждрзНрждрж░:

тЬЕ emoji ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рзБржи
ЁЯУЛ bullet points ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
ЁЯТ░ ржжрж╛ржо/ржкрж░рж┐ржорж╛ржг (тВ╣ ржП)
ЁЯМ▒ ржкрзНрж░рж╛ржпрж╝рзЛржЧрж┐ржХ ржзрж╛ржк-ржзрж╛ржкрж┐ ржирж┐рж░рзНржжрзЗрж╢ржирж╛
ЁЯУЮ рж╕рзНржерж╛ржирзАржпрж╝ ржХрзГрж╖рж┐ ржмрж┐ржнрж╛ржЧрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢

ржЙрждрзНрждрж░ ржмрж╛ржВрж▓рж╛ржпрж╝ рж╣рждрзЗ рж╣ржмрзЗ!`,
                    gu: `ркдркорлЗ ркнрк╛рк░ркдрлАркп ркХрлГрк╖рк┐ ркирк┐рк╖рлНркгрк╛ркд ркЫрлЛред ркЖркХрк░рлНрк╖ркХ ркЬрк╡рк╛ркм:

тЬЕ emoji ркерлА рк╢рк░рлВ ркХрк░рлЛ
ЁЯУЛ bullet points рк╡рк╛рккрк░рлЛ
ЁЯТ░ ркжрк░/ркорк╛ркдрлНрк░рк╛ (тВ╣ ркорк╛ркВ)
ЁЯМ▒ рккрлНрк░ркпрлЛркЧрк┐ркХ ркзрк╛ркк-ркзрк╛рккрлА ркирк┐рк░рлНркжрлЗрк╢
ЁЯУЮ рк╕рлНркерк╛ркирк┐ркХ ркХрлГрк╖рк┐ рк╡рк┐ркнрк╛ркЧ рк╕рк╛ркерлЗ ркпрлЛркЬрк╛ркпрлЛ

ркЬрк╡рк╛ркм ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ рк╣рлЛрк╡рлЛ ркЬрк░рлВрк░рлА!`,
                    mr: `рддреБрдореНрд╣реА рднрд╛рд░рддреАрдп рдХреГрд╖реА рддрдЬреНрдЮ рдЖрд╣рд╛рдд. рдЖрдХрд░реНрд╖рдХ рдЙрддреНрддрд░:

тЬЕ emoji рдиреЗ рд╕реБрд░реВ рдХрд░рд╛
ЁЯУЛ bullet points рд╡рд╛рдкрд░рд╛
ЁЯТ░ рдЦрд░реНрдЪ/рдкреНрд░рдорд╛рдг (тВ╣ рдордзреНрдпреЗ)
ЁЯМ▒ рдкреНрд░рд╛рдпреЛрдЧрд┐рдХ рдзрд╛рдк-рдзрд╛рдкреА рдирд┐рд░реНрджреЗрд╢
ЁЯУЮ рд╕реНрдерд╛рдирд┐рдХ рдХреГрд╖рд┐ рд╡рд┐рднрд╛рдЧ рд╕рд╛рдереА рдпреЛрдЧрд╛рдпреЛ

рдЙрддреНрддрд░ рдорд░рд╛рдареАрдордзреНрдпреЗ рд╣реЛрд╡рд╛ рдЖрд╡рд╢реНрдпрдХ!`,
                    pa: `ридрйБри╕рйАриВ ринри╛ри░ридрйА риЦрйЗридрйА риори╛ри╣ри░ ри╣рйЛред рижри┐ри▓риЪри╕рик риЬри╡ри╛рим:

тЬЕ emoji риири╛ри▓ ри╕ри╝рйБри░рйВ риХри░рйЛ
ЁЯУЛ bullet points ри╡ри░ридрйЛ
ЁЯТ░ риХрйАриорид/риори╛ридри░ри╛ (тВ╣ ри╡ри┐рй▒риЪ)
ЁЯМ▒ рикрйНри░ри╛рипрйЛриЧри┐риХ ризри╛рик-ризри╛рикрйА риири┐ри░рижрйЗри╕ри╝
ЁЯУЮ ри╕риери╛риири┐риХ риЦрйЗридрйА ри╡ри┐ринри╛риЧ риири╛ри▓ рипрйЛриЬри╛рипрйЛриЧ

риЬри╡ри╛рим рикрй░риЬри╛римрйА ри╡ри┐рй▒риЪ ри╣рйЛри╡ри╛ риЬри╛ри╡рйЗ!`
                }
                return messages[lang] || messages.en
            }

            // Try Gemini first (primary) with better error handling
            try {
                console.log('Attempting to use Gemini as primary provider')
                const systemMessage = getSystemMessage(aiResponseLanguage)

                // Enhanced context: Include user's input language for better understanding
                const enhancedUserMessage = confidence > 70 && detectedLang !== responseLanguage
                    ? `[User is communicating in ${getLanguageName(detectedLang)}] ${userMessage}`
                    : isCodeMixed
                        ? `[User is using mixed language/Hinglish] ${userMessage}`
                        : userMessage

                const chatMessages: ChatMessage[] = [
                    {
                        role: 'system',
                        content: systemMessage
                    },
                    {
                        role: 'user',
                        content: enhancedUserMessage
                    }
                ]

                const response = await geminiChat({
                    model: 'models/gemini-2.5-flash', // Using the working model
                    messages: chatMessages,
                    temperature: 0.7,
                    max_tokens: 1500
                }, aiResponseLanguage) // Pass detected/preferred language

                const content = response.choices[0]?.message?.content || ''

                // Check if we got a valid response
                if (content && content !== 'Sorry, I could not generate a response.') {
                    console.log('Gemini response successful')
                    return content
                } else {
                    throw new Error('Gemini returned empty or default response')
                }
            } catch (geminiError) {
                console.error('Gemini API Error, falling back to DeepSeek:', geminiError)

                // Fallback to DeepSeek with better error handling
                try {
                    console.log('Attempting to use DeepSeek as fallback provider')
                    const systemMessage = getSystemMessage(aiResponseLanguage)

                    // Enhanced context: Include user's input language for better understanding
                    const enhancedUserMessage = confidence > 70 && detectedLang !== responseLanguage
                        ? `[User is communicating in ${getLanguageName(detectedLang)}] ${userMessage}`
                        : isCodeMixed
                            ? `[User is using mixed language/Hinglish] ${userMessage}`
                            : userMessage

                    const chatMessages: ChatMessage[] = [
                        {
                            role: 'system',
                            content: systemMessage
                        },
                        {
                            role: 'user',
                            content: enhancedUserMessage
                        }
                    ]

                    const response = await deepseekChat({
                        model: 'deepseek-chat',
                        messages: chatMessages,
                        temperature: 0.7,
                        max_tokens: 1500
                    }, aiResponseLanguage) // Pass detected/preferred language

                    const content = response.choices[0]?.message?.content || ''

                    // Check if we got a valid response
                    if (content && content !== 'Sorry, I could not generate a response.') {
                        console.log('DeepSeek response successful')
                        return content
                    } else {
                        throw new Error('DeepSeek returned empty or default response')
                    }
                } catch (deepseekError) {
                    console.error('DeepSeek API Error:', deepseekError)
                    // If both providers fail, return fallback response
                    return getFallbackResponse(userMessage, aiResponseLanguage)
                }
            }
        } catch (error) {
            console.error('AI response error:', error)
            // Return fallback response on any error
            return getFallbackResponse(userMessage, responseLanguage)
        }
    }

    const getLanguageName = (langCode: string): string => {
        const names: Record<string, string> = {
            'en': 'English',
            'hi': 'Hindi',
            'ta': 'Tamil',
            'te': 'Telugu',
            'bn': 'Bengali',
            'gu': 'Gujarati',
            'mr': 'Marathi',
            'pa': 'Punjabi'
        }
        return names[langCode] || 'English'
    }

    const getFallbackResponse = (userMessage: string, lang: string = language): string => {
        const lowerMessage = userMessage.toLowerCase()

        // Enhanced mock responses with agricultural knowledge
        if (lowerMessage.includes('wheat') || lowerMessage.includes('рдЧреЗрд╣реВрдВ')) {
            return lang === 'hi'
                ? `ЁЯМ╛ рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рд╕рдВрдкреВрд░реНрдг рдЧрд╛рдЗрдб:

1. **рдмреБрд╡рд╛рдИ рдХрд╛ рд╕рдордп**: рдЕрдХреНрдЯреВрдмрд░-рдирд╡рдВрдмрд░ (рд░рдмреА рд╕реАрдЬрди)
2. **рдмреАрдЬ рджрд░**: 100-120 рдХрд┐рд▓реЛ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
3. **рдЙрд░реНрд╡рд░рдХ**: NPK (120:60:40) рдХрд┐рд▓реЛ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
4. **рд╕рд┐рдВрдЪрд╛рдИ**: 4-6 рд╕рд┐рдВрдЪрд╛рдИ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛
5. **рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг**: рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА, рдиреАрдо рдХрд╛ рддреЗрд▓
6. **рдХрдЯрд╛рдИ**: 120-130 рджрд┐рди рдореЗрдВ рддреИрдпрд╛рд░

ЁЯТб рдЙрддреНрдкрд╛рджрди: 25-30 рдХреНрд╡рд┐рдВрдЯрд▓ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
ЁЯУЮ рд╕рд▓рд╛рд╣: рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рд╡рд┐рднрд╛рдЧ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред`
                : `Wheat Cultivation Guide:

1. **Sowing Time**: October-November (Rabi season)
2. **Seed Rate**: 100-120 kg per hectare
3. **Fertilizer**: NPK (120:60:40) kg per hectare
4. **Irrigation**: 4-6 irrigations needed
5. **Pest Control**: Regular monitoring, neem oil spray
6. **Harvesting**: Ready in 120-130 days

ЁЯТб Yield: 25-30 quintals per hectare
ЁЯУЮ Advice: Contact local agricultural department.`
        }

        if (lowerMessage.includes('tomato') || lowerMessage.includes('рдЯрдорд╛рдЯрд░')) {
            return lang === 'hi'
                ? `ЁЯНЕ рдЯрдорд╛рдЯрд░ рдХреА рд╕рдВрдкреВрд░реНрдг рджреЗрдЦрднрд╛рд▓:

1. **рдореМрд╕рдо**: рд╕рд╛рд▓ рднрд░ (рд╕рд┐рдВрдЪрд┐рдд рдХреНрд╖реЗрддреНрд░)
2. **рддрд╛рдкрдорд╛рди**: 20-25┬░C рдЖрджрд░реНрд╢
3. **рдорд┐рдЯреНрдЯреА**: рджреЛрдордЯ рдорд┐рдЯреНрдЯреА, pH 6.0-7.0
4. **рдкрд╛рдиреА рдкреНрд░рдмрдВрдзрди**: рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ рд╕рд░реНрд╡реЛрддреНрддрдо
5. **рдореБрдЦреНрдп рд░реЛрдЧ**: рдЕрдЧреЗрддреА рдЭреБрд▓рд╕рд╛, рдкрдЫреЗрддреА рдЭреБрд▓рд╕рд╛
6. **рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг**: рдиреАрдо рдХрд╛ рддреЗрд▓ рдЫрд┐рдбрд╝рдХрд╛рд╡
7. **рдХрдЯрд╛рдИ**: 70-80 рджрд┐рди рдореЗрдВ рдлрд▓ рддреИрдпрд╛рд░

ЁЯТ░ рдЙрддреНрдкрд╛рджрди: 300-500 рдХреНрд╡рд┐рдВрдЯрд▓ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
тЬи рд╕рдлрд▓ рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдирд┐рдпрдорд┐рдд рджреЗрдЦрднрд╛рд▓ рдЬрд░реВрд░реА рд╣реИред`
                : `Tomato Cultivation:

ЁЯНЕ Sowing: Year-round (irrigated areas)
ЁЯМбя╕П Temperature: 20-25┬░C ideal
ЁЯТз Water Management: Drip irrigation best
ЁЯжа Major Diseases: Early blight, late blight
ЁЯУИ Yield: 300-500 quintals/hectare`
        }

        return lang === 'hi'
            ? `рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓: ${userMessage}

AI рд╕реБрд╡рд┐рдзрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ, рд▓реЗрдХрд┐рди рдпрд╣рд╛рдБ рдХреБрдЫ рд╕рд╛рдорд╛рдиреНрдп рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рд╣реИ:

тАв рдирд┐рдпрдорд┐рдд рдорд┐рдЯреНрдЯреА рдЬрд╛рдВрдЪ рдХрд░рд╛рдПрдВ
тАв рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ
тАв рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
тАв рдПрдХреАрдХреГрдд рдХреАрдЯ рдкреНрд░рдмрдВрдзрди рдЕрдкрдирд╛рдПрдВ
тАв рдореМрд╕рдо рдЖрдзрд╛рд░рд┐рдд рд╕рд▓рд╛рд╣ рд▓реЗрдВ

рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдЕрдиреНрдп рдЯреВрд▓реНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред`
            : `Your question: ${userMessage}

AI feature unavailable, but here's general agricultural advice:

тАв Conduct regular soil testing
тАв Practice crop rotation
тАв Use organic fertilizers
тАв Implement integrated pest management
тАв Follow weather-based advisories

Use other tools for more specific information.`
    }

    const handleSendMessage = async () => {
        if (!inputValue.trim()) return

        // Enhanced: Detect input language for intelligent response
        const inputDetection = detectAndSuggestLanguage(inputValue)
        const detectedLang = inputDetection.detectedLanguage
        const confidence = inputDetection.confidence

        // Use detected language if confidence is high, otherwise use current app language
        const messageLanguage = (confidence > 70 && detectedLang !== 'en') ? detectedLang : language

        // Show language suggestion only for significant language switches
        if (inputDetection.shouldSuggest && confidence > 80 && detectedLang !== language) {
            setLanguageSuggestion({
                show: true,
                detectedLang: detectedLang,
                confidence: confidence
            })
        } else {
            setLanguageSuggestion({ show: false, detectedLang: '', confidence: 0 })
        }

        const userMessage: Message = {
            id: Date.now().toString(),
            type: 'user',
            content: inputValue.trim(),
            timestamp: new Date(),
            lang: detectedLang // Store detected language with message
        }

        setMessages(prev => [...prev, userMessage])
        setInputValue('')
        setIsLoading(true)

        try {
            // Generate AI response in the detected/preferred language
            const aiResponse = await generateAIResponse(userMessage.content, messageLanguage)

            const botMessage: Message = {
                id: (Date.now() + 1).toString(),
                type: 'bot',
                content: aiResponse,
                timestamp: new Date(),
                lang: messageLanguage // AI responds in the same language
            }

            setMessages(prev => [...prev, botMessage])

            // Manual speech output - only speak when user clicks the speech button
            if (voiceEnabled && aiResponse) {
                // Don't auto-speak, let user control when to hear the response
                // onSpeak(aiResponse)
            }
        } catch (error) {
            console.error('Error generating response:', error)
            const errorMessage: Message = {
                id: (Date.now() + 1).toString(),
                type: 'bot',
                content: 'Sorry, I encountered an error. Please try again.',
                timestamp: new Date(),
                lang: language
            }
            setMessages(prev => [...prev, errorMessage])
        } finally {
            setIsLoading(false)
        }
    }

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault()
            handleSendMessage()
        }
    }

    const handleCopyMessage = async (content: string) => {
        try {
            await navigator.clipboard.writeText(content);
        } catch (err) {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = content;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
        }
    }

    const handleShareMessage = async (content: string) => {
        // Create a more complete share payload
        const shareData = {
            title: 'KrishiMitra AI Advisor Response',
            text: content,
            url: window.location.href // Include current page URL
        };

        if (navigator.share) {
            try {
                await navigator.share(shareData);
            } catch (err) {
                console.log('Sharing failed', err);
                // Fallback to copy if sharing fails
                await handleCopyMessage(content);
            }
        } else {
            // Fallback to copy for browsers that don't support Web Share API
            await handleCopyMessage(content);
        }
    }

    const getQuickQuestions = () => {
        const questions: Record<string, string[]> = {
            hi: [
                'рдЗрд╕ рдореМрд╕рдо рдореЗрдВ рдХреМрди рд╕реА рдлрд╕рд▓ рдмреЛрдиреА рдЪрд╛рд╣рд┐рдП?',
                'рдХреАрдЯ рдиреБрдХрд╕рд╛рди рд╕реЗ рдХреИрд╕реЗ рдмрдЪрд╛рд╡ рдХрд░реЗрдВ?',
                'рдЧреЗрд╣реВрдВ рдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рдЙрд░реНрд╡рд░рдХ?',
                'рдЪрд╛рд╡рд▓ рдХреА рдХрдЯрд╛рдИ рдХрдм рдХрд░реЗрдВ?',
                'рдХрдкрд╛рд╕ рдХреА рд╕рд┐рдВрдЪрд╛рдИ рдХрд╛ рд╕рдордп?',
                'рдорд┐рдЯреНрдЯреА рддреИрдпрд╛рд░ рдХрд░рдиреЗ рдХреЗ рддрд░реАрдХреЗ?'
            ],
            en: [
                'What crops should I plant this season?',
                'How to prevent pest damage?',
                'Best fertilizer for wheat?',
                'When to harvest rice?',
                'Irrigation schedule for cotton?',
                'Soil preparation tips?'
            ],
            ta: [
                'роЗроирпНрод рокро░рпБро╡родрпНродро┐ро▓рпН роОроирпНрод рокропро┐ро░рпН роироЯро╡рпЗрогрпНроЯрпБроорпН?',
                'рокрпВроЪрпНроЪро┐ родро╛роХрпНроХрпБродро▓рпИ роОрокрпНрокроЯро┐ родроЯрпБрокрпНрокродрпБ?',
                'роХрпЛродрпБроорпИроХрпНроХрпБ роЪро┐ро▒роирпНрод роЙро░роорпН?',
                'роирпЖро▓рпН роЕро▒рпБро╡роЯрпИ роОрокрпНрокрпЛродрпБ?',
                'рокро░рпБродрпНродро┐роХрпНроХрпБ роирпАро░рпНрокрпНрокро╛роЪрой роЕроЯрпНроЯро╡рогрпИ?',
                'роорогрпН родропро╛ро░ро┐рокрпНрокрпБ ро╡ро┤ро┐роХро│рпН?'
            ],
            te: [
                'р░И р░╕р▒Ар░Ьр░ир▒НтАМр░▓р▒Л р░П р░кр░Вр░Я р░╡р▒Зр░пр░╛р░▓р░┐?',
                'р░кр▒Бр░░р▒Бр░Чр▒Бр░▓ р░ир░╖р▒Нр░Яр░╛р░ир▒Нр░ир░┐ р░Ор░▓р░╛ р░ир░┐р░╡р░╛р░░р░┐р░Вр░Ър░╛р░▓р░┐?',
                'р░Чр▒Лр░зр▒Бр░ор░Хр▒Б р░Йр░др▒Нр░др░о р░Ор░░р▒Бр░╡р▒Б?',
                'р░╡р░░р░┐р░ир░┐ р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░Хр▒Лр░пр░╛р░▓р░┐?',
                'р░кр░др▒Нр░др░┐р░Хр░┐ р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ р░Хр░╛р░▓р░Хр▒Нр░░р░ор░В?',
                'р░ор░Яр▒Нр░Яр░┐ р░др░пр░╛р░░р▒А р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б?'
            ],
            bn: [
                'ржПржЗ ржорзМрж╕рзБржорзЗ ржХрзЛржи ржлрж╕рж▓ ржмржкржи ржХрж░ржм?',
                'ржкрзЛржХрж╛рж░ ржХрзНрж╖рждрж┐ ржерзЗржХрзЗ ржХрзАржнрж╛ржмрзЗ рж░ржХрзНрж╖рж╛ ржкрж╛ржм?',
                'ржЧржорзЗрж░ ржЬржирзНржп рж╕рзЗрж░рж╛ рж╕рж╛рж░?',
                'ржзрж╛ржи ржХрж╛ржЯрж╛рж░ рж╕ржоржпрж╝ ржХржЦржи?',
                'рждрзБрж▓рж╛рж░ рж╕рзЗржЪрзЗрж░ рж╕ржоржпрж╝рж╕рзВржЪрзА?',
                'ржорж╛ржЯрж┐ ржкрзНрж░рж╕рзНрждрзБрждрж┐рж░ ржЙржкрж╛ржпрж╝?'
            ],
            gu: [
                'ркЖ ркорлМрк╕ркоркорк╛ркВ ркХркИ рклрк╕рк▓ ркмрлЛркирлА ркЖрк╡рлЗ?',
                'рккрлВркЪрлНркЪрк┐ркирлА ркирк╖рлНркЯрк╛ркирлНркирлА ркерлА рк░ркХрлНрк╖ркг ркХрлЗрк╡рлА рк░рлАркдрлЗ?',
                'ркЧрлЛркзрлБрко ркорк╛ркЯрлЗ рк╕рк░рлНрк╡рлЛркдрлНркдрко ркЙрк░рлНрк╡рк░ркХ?',
                'ркЪрк╛рк╡рк▓ркирлА ркХркЯрк╛ркИ ркХрлНркпрк╛рк░рлЗ?',
                'ркХрккрк╛рк╕ ркорк╛ркЯрлЗ рк╕рк┐ркВркЪрк╛ркИ рк╕ркоркпрк░рлА?',
                'ркорк┐ркЯрлНркЯрлА ркдрлИркпрк╛рк░рлА ркЯрк┐рккрлНрк╕?'
            ],
            mr: [
                'рд╣рд╛ рдореМрд╕рдорд╛рдд рдЖрдгрд┐ рдХреЛрдгрддреА рдлрд╕рд▓ рдмреЛрдиреА рдЖрд╡реЗ?',
                'рдХреАрдЯрд╛рдВрдЪреА рдиреБрдХрд╕рд╛рдирд╛рдВрд╕рд╛рдареА рдХрд╕реЗ рд░рдХреНрд╖рдг рдХрд░рд╛рд╡реЗ?',
                'рдЧреЗрд╣реВрдВрдЪреНрдпрд╛ рд▓рд╛рдЧреА рд╕рд░реНрд╡реЛрддреНрддрдо рдЙрд░реНрд╡рд░рдХ?',
                'рдЪрд╛рд╡рд▓рдЪреА рдХрдЯрд╛рдИ рдХрдзреА рдХрд░рд╛рд╡реЗ?',
                'рдХрдкрд╛рд╕рдЪреНрдпрд╛ рд▓рд╛рдЧреА рд╕рд┐рдВрдЪрд╛рдИ рдХрд╛рд▓рдХреНрд░рдо?',
                'рдорд┐рдЯреНрдЯреАрдЪреА рддреИрдпрд╛рд░реА рдЯрд┐рдкреНрд╕?'
            ],
            pa: [
                'риЗри╕ риорйМри╕рио ри╡ри┐рй▒риЪ риХри┐ри╕ рилри╕ри▓ риири╛ри▓ римрйЛриирйА риЖри╡рйЗ?',
                'риХрйАриЯ риирйБриХри╕ри╛рии ридрйЛриВ риХри┐ри╡рйЗриВ ри░риХри╕ри╛ рикри╛ри╡рйЗ?',
                'риЧрйЛризрйБрио ри▓риИ ри╕ри╣рйА риЙри░ри╡ри░риХ?',
                'риЪри╛ри╡ри▓ риХриЯри╛риЙриг рижри╛ ри╕риори╛рии?',
                'риХрикри╛ри╕ ри▓риИ ри╕рйАриВриЪри╛риИ ри╕риори╛рии?',
                'риори┐риЯриЯрйА ридри┐риЖри░рйА риЯри┐рикри╕?'
            ]
        }
        return questions[language] || questions.en
    }

    return (
        <div className="flex flex-col h-full max-w-4xl mx-auto">
            <Card className="flex flex-col flex-1">
                <CardHeader className="bg-gradient-to-r from-green-600 to-emerald-700 text-white rounded-t-lg">
                    <CardTitle className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                            <div className="bg-white/20 p-2 rounded-full">
                                <Bot className="w-6 h-6" />
                            </div>
                            <div>
                                <h2 className="text-xl font-bold">KrishiMitra AI Advisor</h2>
                                <p className="text-sm text-green-100">Your intelligent farming assistant</p>
                            </div>
                        </div>
                        <div className="flex items-center space-x-2">
                            <Badge variant="secondary" className="bg-white/20 text-white border-0">
                                {getLanguageDisplayName(language)}
                            </Badge>
                            <Badge variant={isOnline ? "default" : "destructive"} className={isOnline ? "bg-green-500" : ""}>
                                {isOnline ? 'Online' : 'Offline'}
                            </Badge>
                        </div>
                    </CardTitle>
                </CardHeader>
                <CardContent className="flex flex-col flex-1 p-0">
                    <ScrollArea className="flex flex-col flex-1 p-4 h-[500px]" ref={scrollAreaRef}>
                        {messages.map((message) => (
                            <div key={message.id} className={`flex mb-4 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                                <div className={`flex max-w-[85%] ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                                    <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center mx-2 my-1 ${message.type === 'user'
                                        ? 'bg-blue-500 text-white'
                                        : 'bg-green-500 text-white'
                                        }`}>
                                        {message.type === 'user' ? <User className="w-5 h-5" /> : <Bot className="w-5 h-5" />}
                                    </div>
                                    <div className={`rounded-2xl px-4 py-3 shadow-sm ${message.type === 'user'
                                        ? 'bg-blue-500 text-white rounded-tr-none'
                                        : 'bg-gray-100 dark:bg-gray-700 rounded-tl-none'
                                        }`}>
                                        <div className="prose prose-sm max-w-none dark:prose-invert">
                                            {message.type === 'bot' ? (
                                                <div
                                                    dangerouslySetInnerHTML={{
                                                        __html: message.content
                                                            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                                                            .replace(/\n/g, '<br/>')
                                                            .replace(/тАв /g, '<br/>тАв ')
                                                            .replace(/ЁЯТ░ /g, '<br/>ЁЯТ░ ')
                                                            .replace(/ЁЯМ▒ /g, '<br/>ЁЯМ▒ ')
                                                            .replace(/ЁЯТз /g, '<br/>ЁЯТз ')
                                                            .replace(/ЁЯзк /g, '<br/>ЁЯзк ')
                                                            .replace(/ЁЯжЧ /g, '<br/>ЁЯжЧ ')
                                                            .replace(/ЁЯУИ /g, '<br/>ЁЯУИ ')
                                                            .replace(/ЁЯТб /g, '<br/>ЁЯТб ')
                                                            .replace(/ЁЯУЕ /g, '<br/>ЁЯУЕ ')
                                                            .replace(/тЪая╕П /g, '<br/>тЪая╕П ')
                                                            .replace(/ЁЯПЫя╕П /g, '<br/>ЁЯПЫя╕П ')
                                                            .replace(/ЁЯУЛ /g, '<br/>ЁЯУЛ ')
                                                    }}
                                                />
                                            ) : (
                                                <p>{message.content}</p>
                                            )}
                                        </div>
                                        <div className="flex items-center mt-2 text-xs opacity-70">
                                            <span>{message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                                            {message.type === 'bot' && (
                                                <div className="flex ml-2 space-x-1">
                                                    <Button
                                                        variant="ghost"
                                                        size="icon"
                                                        className="h-6 w-6 hover:bg-white/20"
                                                        onClick={() => handleCopyMessage(message.content)}
                                                    >
                                                        <Copy className="w-3 h-3" />
                                                    </Button>
                                                    <Button
                                                        variant="ghost"
                                                        size="icon"
                                                        className="h-6 w-6 hover:bg-white/20"
                                                        onClick={() => handleShareMessage(message.content)}
                                                    >
                                                        <Share2 className="w-3 h-3" />
                                                    </Button>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                        {isLoading && (
                            <div className="flex justify-start mb-4">
                                <div className="flex">
                                    <div className="flex-shrink-0 w-10 h-10 rounded-full bg-green-500 text-white flex items-center justify-center mx-2 my-1">
                                        <Bot className="w-5 h-5" />
                                    </div>
                                    <div className="bg-gray-100 dark:bg-gray-700 rounded-2xl rounded-tl-none px-4 py-3">
                                        <div className="flex items-center space-x-2">
                                            <Loader2 className="w-4 h-4 animate-spin" />
                                            <span className="text-sm">Thinking...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                    </ScrollArea>
                </CardContent>
            </Card>

            {/* Quick Questions Section */}
            <div className="mt-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
                <h3 className="text-sm font-semibold mb-2 text-gray-700 dark:text-gray-300">Quick Questions:</h3>
                <div className="flex flex-wrap gap-2">
                    {getQuickQuestions().slice(0, 4).map((question, index) => (
                        <Button
                            key={index}
                            variant="outline"
                            size="sm"
                            className="text-xs h-8 bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600"
                            onClick={() => setInputValue(question)}
                        >
                            {question}
                        </Button>
                    ))}
                </div>
            </div>

            {/* Input Area */}
            <div className="flex items-center space-x-2 mt-4">
                <div className="flex-1 relative">
                    <Input
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                        onKeyDown={handleKeyPress}
                        placeholder="Ask about farming, crops, pests, weather..."
                        className="pr-12 py-3"
                        disabled={isLoading}
                    />
                    {voiceEnabled && (
                        <Button
                            size="icon"
                            variant="ghost"
                            className="absolute right-2 top-1/2 transform -translate-y-1/2"
                            onClick={isListening ? stopVoiceRecognition : startVoiceRecognition}
                            disabled={isLoading}
                        >
                            {isListening ? (
                                <MicOff className="h-5 w-5 text-red-500" />
                            ) : (
                                <Mic className="h-5 w-5 text-blue-500" />
                            )}
                        </Button>
                    )}
                </div>
                <Button
                    onClick={handleSendMessage}
                    disabled={isLoading || !inputValue.trim()}
                    className="bg-green-600 hover:bg-green-700 text-white px-4 py-3"
                >
                    {isLoading ? <Loader2 className="w-5 h-5 animate-spin" /> : <Send className="w-5 h-5" />}
                </Button>
            </div>

            {/* Language Suggestion */}
            {languageSuggestion.show && (
                <div className="mt-2 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                    <div className="flex items-center justify-between">
                        <p className="text-sm">
                            Switch to {getLanguageName(languageSuggestion.detectedLang)} for better understanding?
                        </p>
                        <div className="flex space-x-2">
                            <Button
                                size="sm"
                                onClick={() => {
                                    autoSetLanguageFromInput(inputValue || messages[messages.length - 2]?.content || '')
                                    setLanguageSuggestion({ show: false, detectedLang: '', confidence: 0 })
                                }}
                            >
                                Yes
                            </Button>
                            <Button
                                size="sm"
                                variant="outline"
                                onClick={() => setLanguageSuggestion({ show: false, detectedLang: '', confidence: 0 })}
                            >
                                No
                            </Button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    )
}

export default EnhancedChatBot
