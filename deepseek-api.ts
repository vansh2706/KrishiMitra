// DeepSeek API integration for KrishiMitra
'use client'

// Define types directly in this file
export interface ChatMessage {
    role: 'system' | 'user' | 'assistant'
    content: string
}

interface DeepSeekResponse {
    choices: Array<{
        message: {
            content: string
        }
    }>
    citations?: string[]
}

interface DeepSeekRequest {
    model: string
    messages: ChatMessage[]
    temperature?: number
    max_tokens?: number
}

// Main chat function using DeepSeek with enhanced agricultural prompts
export async function deepseekChat(request: DeepSeekRequest, language: string = 'en'): Promise<DeepSeekResponse> {
    try {
        // Call our serverless function instead of calling DeepSeek directly
        const response = await fetch('/api/deepseek', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                messages: request.messages,
                model: request.model || 'deepseek-chat',
                temperature: request.temperature,
                maxTokens: request.max_tokens,
            }),
        })

        if (!response.ok) {
            // Handle specific error cases
            if (response.status === 429) {
                throw new Error('You have exceeded your daily AI request limit. Please try again later.')
            } else if (response.status === 500) {
                throw new Error('AI service is temporarily unavailable. Please try again later.')
            } else {
                throw new Error(`HTTP error! status: ${response.status}`)
            }
        }

        const data = await response.json()
        return data
    } catch (error) {
        console.error('DeepSeek Chat API Error:', error)
        // Fallback to mock response on error
        return getMockResponse(request, language)
    }
}

// Function for image analysis using DeepSeek Vision API
export async function deepseekImageAnalysis(imageData: string, language: string = 'en') {
    try {
        // Call our serverless function for pest analysis
        const response = await fetch('/api/deepseek-vision', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                imageData: imageData,
                language: language
            }),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('DeepSeek Image Analysis Error:', error);
        // Return a mock response on error
        return getMockImageAnalysisResponse(language);
    }
}

// Mock implementation for development and fallback
function getMockResponse(request: DeepSeekRequest, language: string = 'en'): DeepSeekResponse {
    const userMessage = request.messages.find((msg: ChatMessage) => msg.role === 'user')?.content || ''
    const mockResponse = generateMockResponse(userMessage, language)

    return {
        choices: [{
            message: {
                content: mockResponse
            }
        }],
        citations: [
            'https://krishi.mit.gov.in/',
            'https://www.icar.org.in/',
            'https://agricoop.nic.in/'
        ]
    }
}

function generateMockResponse(question: string, language: string): string {
    const lowerQuestion = question.toLowerCase()

    // Language-specific responses based on detected language
    if (language === 'hi') {
        if (lowerQuestion.includes('рдЧреЗрд╣реВрдВ') || lowerQuestion.includes('wheat')) {
            return `ЁЯМ╛ рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рд╕рдВрдкреВрд░реНрдг рдЧрд╛рдЗрдб:

1. **рдмреБрд╡рд╛рдИ рдХрд╛ рд╕рдордп**: рдЕрдХреНрдЯреВрдмрд░-рдирд╡рдВрдмрд░ (рд░рдмреА рд╕реАрдЬрди)
2. **рдмреАрдЬ рджрд░**: 100-120 рдХрд┐рд▓реЛ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
3. **рдЙрд░реНрд╡рд░рдХ**: NPK (120:60:40) рдХрд┐рд▓реЛ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
4. **рд╕рд┐рдВрдЪрд╛рдИ**: 4-6 рд╕рд┐рдВрдЪрд╛рдИ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛
5. **рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг**: рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА, рдиреАрдо рдХрд╛ рддреЗрд▓
6. **рдХрдЯрд╛рдИ**: 120-130 рджрд┐рди рдореЗрдВ рддреИрдпрд╛рд░

ЁЯТб рдЙрддреНрдкрд╛рджрди: 25-30 рдХреНрд╡рд┐рдВрдЯрд▓ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
ЁЯУЮ рд╕рд▓рд╛рд╣: рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рд╡рд┐рднрд╛рдЧ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред`
        }

        if (lowerQuestion.includes('рдЯрдорд╛рдЯрд░') || lowerQuestion.includes('tomato')) {
            return `ЁЯНЕ рдЯрдорд╛рдЯрд░ рдХреА рд╕рдВрдкреВрд░реНрдг рджреЗрдЦрднрд╛рд▓:

1. **рдореМрд╕рдо**: рд╕рд╛рд▓ рднрд░ (рд╕рд┐рдВрдЪрд┐рдд рдХреНрд╖реЗрддреНрд░)
2. **рддрд╛рдкрдорд╛рди**: 20-25┬░C рдЖрджрд░реНрд╢
3. **рдорд┐рдЯреНрдЯреА**: рджреЛрдордЯ рдорд┐рдЯреНрдЯреА, pH 6.0-7.0
4. **рдкрд╛рдиреА рдкреНрд░рдмрдВрдзрди**: рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ рд╕рд░реНрд╡реЛрддреНрддрдо
5. **рдореБрдЦреНрдп рд░реЛрдЧ**: рдЕрдЧреЗрддреА рдЭреБрд▓рд╕рд╛, рдкрдЫреЗрддреА рдЭреБрд▓рд╕рд╛
6. **рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг**: рдиреАрдо рдХрд╛ рддреЗрд▓ рдЫрд┐рдбрд╝рдХрд╛рд╡
7. **рдХрдЯрд╛рдИ**: 70-80 рджрд┐рди рдореЗрдВ рдлрд▓ рддреИрдпрд╛рд░

ЁЯТ░ рдЙрддреНрдкрд╛рджрди: 300-500 рдХреНрд╡рд┐рдВрдЯрд▓ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
тЬи рд╕рдлрд▓ рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдирд┐рдпрдорд┐рдд рджреЗрдЦрднрд╛рд▓ рдЬрд░реВрд░реА рд╣реИред`
        }

        return `ЁЯЩП рдЖрдкрдХреЗ рдХреГрд╖рд┐ рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!

рдпрд╣рд╛рдБ рдХреБрдЫ рд╕рд╛рдорд╛рдиреНрдп рдЦреЗрддреА рдХреЗ рд╕реБрдЭрд╛рд╡ рд╣реИрдВ:

1. **рдорд┐рдЯреНрдЯреА рдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп**: рдирд┐рдпрдорд┐рдд рдЬрд╛рдВрдЪ рдФрд░ рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдХрд╛ рдЙрдкрдпреЛрдЧ
2. **рдлрд╕рд▓ рдЪрдХреНрд░**: рдмреЗрд╣рддрд░ рдкреИрджрд╛рд╡рд╛рд░ рдХреЗ рд▓рд┐рдП рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ
3. **рдкрд╛рдиреА рдХрд╛ рдкреНрд░рдмрдВрдзрди**: рдХреБрд╢рд▓ рд╕рд┐рдВрдЪрд╛рдИ рдкреНрд░рдгрд╛рд▓реА рдЕрдкрдирд╛рдПрдВ
4. **рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг**: рдПрдХреАрдХреГрдд рдХреАрдЯ рдкреНрд░рдмрдВрдзрди (IPM) рдЕрдкрдирд╛рдПрдВ
5. **рдореМрд╕рдо рдЖрдзрд╛рд░рд┐рдд рд╕рд▓рд╛рд╣**: рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА рд░рдЦреЗрдВ

ЁЯТб рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕рд▓рд╛рд╣ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдлрд╕рд▓ рдФрд░ рд╕реНрдерд╛рди рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░реЗрдВред

ЁЯУ▒ рдЕрдиреНрдп рдЯреВрд▓реНрд╕ рдХрд╛ рднреА рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ: рдореМрд╕рдо рдбреИрд╢рдмреЛрд░реНрдб, рдорд┐рдЯреНрдЯреА рдЧрд╛рдЗрдб, рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдпред`
    }

    // English responses
    if (lowerQuestion.includes('fertilizer') || lowerQuestion.includes('soil')) {
        return `ЁЯМ▒ Soil and Fertilizer Management Guide:

1. **Soil Testing**: Get soil tested every 2-3 years
2. **Organic Matter**: Add 5-10 tonnes compost per hectare
3. **NPK Balance**: Apply based on soil test results
4. **pH Management**: Maintain pH between 6.0-7.5
5. **Micronutrients**: Apply zinc, boron as needed
6. **Timing**: Apply fertilizers at right growth stages

ЁЯТб **Pro Tips**:
- Use bio-fertilizers for sustainable farming
- Practice green manuring
- Avoid over-fertilization

ЁЯУЮ Consult local agricultural experts for soil-specific advice.`
    }

    if (lowerQuestion.includes('irrigation') || lowerQuestion.includes('water')) {
        return `ЁЯТз Smart Irrigation Practices:

1. **Timing**: Early morning (6-8 AM) or evening (4-6 PM)
2. **Frequency**: Based on soil moisture and crop stage
3. **Methods**: 
   - Drip irrigation (90% efficiency)
   - Sprinkler system (75-85% efficiency)
   - Furrow irrigation (60-70% efficiency)
4. **Water Quality**: EC should be < 2.0 dS/m
5. **Scheduling**: Use tensiometers for precise timing

ЁЯОп **Benefits**:
- 20-30% water savings
- Better crop yield
- Reduced disease incidence

ЁЯТб Consider mulching to reduce water evaporation.`
    }

    if (lowerQuestion.includes('pest') || lowerQuestion.includes('insect')) {
        return `ЁЯРЫ Integrated Pest Management (IPM):

1. **Prevention First**:
   - Crop rotation
   - Resistant varieties
   - Clean cultivation

2. **Monitoring**:
   - Weekly field inspection
   - Pheromone traps
   - Yellow sticky traps

3. **Biological Control**:
   - Beneficial insects
   - Neem-based pesticides
   - Bacillus thuringiensis

4. **Chemical Control** (last resort):
   - Use recommended pesticides
   - Follow label instructions
   - Maintain pre-harvest interval

ЁЯМ┐ **Organic Options**: Neem oil, garlic spray, soap solution
тЪая╕П Always wear protective equipment when spraying.`
    }

    // Default comprehensive response
    return `ЁЯМ╛ **Agricultural Guidance System**

Thank you for your farming question! Here's comprehensive advice:

**ЁЯМ▒ Soil Health**:
- Regular soil testing
- Organic matter addition
- Balanced fertilization

**ЁЯТз Water Management**:
- Efficient irrigation systems
- Rainwater harvesting
- Mulching practices

**ЁЯЫбя╕П Crop Protection**:
- Integrated pest management
- Disease monitoring
- Preventive measures

**ЁЯУИ Yield Optimization**:
- Quality seeds/seedlings
- Proper spacing
- Timely operations

**ЁЯМР Modern Techniques**:
- Precision farming
- Weather-based advisories
- Mobile apps for guidance

ЁЯТб **For specific advice**, please provide:
- Your location/state
- Crop type and variety
- Current growth stage
- Specific problem/concern

ЁЯУ▒ **Use other tools**: Weather Dashboard, Soil Guide, Market Prices, Pest Detection`
}

// Mock response for image analysis
function getMockImageAnalysisResponse(language: string = 'en') {
    // Language-specific mock responses
    const mockResponses: Record<string, any> = {
        en: {
            success: true,
            result: {
                pestName: "Fall Armyworm",
                confidence: 85,
                severity: "high",
                description: "The Fall Armyworm is a serious pest that affects corn, sorghum, and other crops.",
                symptoms: [
                    "Large irregular holes in leaves",
                    "Windowing damage on young leaves",
                    "Presence of caterpillars on plants",
                    "Frass (insect waste) on leaves"
                ],
                treatment: [
                    "Apply Bacillus thuringiensis (Bt) spray",
                    "Use neem oil solution (2 ml per liter water)",
                    "Introduce beneficial insects like Trichogramma wasps",
                    "Remove and destroy affected plant parts"
                ],
                prevention: [
                    "Regular field monitoring",
                    "Destroy crop residues after harvest",
                    "Plant trap crops like marigold",
                    "Maintain proper field sanitation"
                ],
                cropsDamaged: ["Corn", "Sorghum", "Rice", "Wheat"],
                seasonality: "Active during warm, humid months",
                organicTreatment: [
                    "Neem oil spray (2 ml per liter water)",
                    "Garlic-chili spray",
                    "Beneficial insect release",
                    "Companion planting with marigold"
                ],
                chemicalTreatment: [
                    "Chlorantraniliprole 0.4% GR",
                    "Emamectin benzoate 5% SG",
                    "Spinosad 45% SC",
                    "Consult local agricultural officer for proper dosage"
                ]
            }
        },
        hi: {
            success: true,
            result: {
                pestName: "рдЦрд░реАрдл рдЖрд░реНрдореАрд╡рд░реНрдо",
                confidence: 85,
                severity: "high",
                description: "рдЦрд░реАрдл рдЖрд░реНрдореАрд╡рд░реНрдо рдПрдХ рдЧрдВрднреАрд░ рдХреАрдЯ рд╣реИ рдЬреЛ рдордХрдИ, рдЬреНрд╡рд╛рд░ рдФрд░ рдЕрдиреНрдп рдлрд╕рд▓реЛрдВ рдХреЛ рдкреНрд░рднрд╛рд╡рд┐рдд рдХрд░рддрд╛ рд╣реИред",
                symptoms: [
                    "рдкрддреНрддрд┐рдпреЛрдВ рдореЗрдВ рдмрдбрд╝реЗ рдЕрдирд┐рдпрдорд┐рдд рдЫреЗрдж",
                    "рдирдП рдкрддреНрддреЛрдВ рдкрд░ рдЦрд┐рдбрд╝рдХреА рджреБрд╖реНрдЯрддрд╛",
                    "рдкреМрдзреЛрдВ рдкрд░ рдЗрд▓реНрд▓реА рдХреА рдЙрдкрд╕реНрдерд┐рддрд┐",
                    "рдкрддреНрддреЛрдВ рдкрд░ рдлреНрд░рд╛рд╕ (рдХреАрдЯ рдХрдЪрд░рд╛)"
                ],
                treatment: [
                    "рдмреИрд╕рд┐рд▓рд╕ рдереБрд░рд┐рдВрдЬрд┐рдПрдВрд╕рд┐рд╕ (рдмреАрдЯреА) рд╕реНрдкреНрд░реЗ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ",
                    "рдиреАрдо рддреЗрд▓ рдШреЛрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ (2 рдорд┐рд▓реА рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА)",
                    "рдЯреНрд░рд╛рдЗрдХреЛрдЧреНрд░рд╛рдорд╛ рд╡рд╛рд╕реНрдк рдЬреИрд╕реЗ рд▓рд╛рднрдХрд╛рд░реА рдХреАрдЯреЛрдВ рдХреЛ рдкреЗрд╢ рдХрд░реЗрдВ",
                    "рдкреНрд░рднрд╛рд╡рд┐рдд рдкреМрдзреЗ рдХреЗ рд╣рд┐рд╕реНрд╕реЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдВ рдФрд░ рдирд╖реНрдЯ рдХрд░реЗрдВ"
                ],
                prevention: [
                    "рдирд┐рдпрдорд┐рдд рдЦреЗрдд рдирд┐рдЧрд░рд╛рдиреА",
                    "рдХрдЯрд╛рдИ рдХреЗ рдмрд╛рдж рдлрд╕рд▓ рдЕрд╡рд╢реЗрд╖реЛрдВ рдХреЛ рдирд╖реНрдЯ рдХрд░реЗрдВ",
                    "рдореИрд░рд┐рдЧреЛрд▓реНрдб рдЬреИрд╕реА рдлрд╕рд▓ рд▓рдЧрд╛рдПрдВ",
                    "рдЙрдЪрд┐рдд рдЦреЗрдд рд╕реНрд╡рдЪреНрдЫрддрд╛ рдмрдирд╛рдП рд░рдЦреЗрдВ"
                ],
                cropsDamaged: ["рдордХрдИ", "рдЬреНрд╡рд╛рд░", "рдЪрд╛рд╡рд▓", "рдЧреЗрд╣реВрдВ"],
                seasonality: "рдЧрд░реНрдо, рдЖрд░реНрджреНрд░ рдорд╣реАрдиреЛрдВ рдХреЗ рджреМрд░рд╛рди рд╕рдХреНрд░рд┐рдп",
                organicTreatment: [
                    "рдиреАрдо рддреЗрд▓ рд╕реНрдкреНрд░реЗ (2 рдорд┐рд▓реА рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА)",
                    "рд▓рд╣рд╕реБрди-рдорд┐рд░реНрдЪ рд╕реНрдкреНрд░реЗ",
                    "рд▓рд╛рднрдХрд╛рд░реА рдХреАрдЯ рд░рд┐рд▓реАрдЬрд╝",
                    "рдореИрд░рд┐рдЧреЛрд▓реНрдб рдХреЗ рд╕рд╛рде рд╕рд╣рдЪрд░ рдЦреЗрддреА"
                ],
                chemicalTreatment: [
                    "рдХреНрд▓реЛрд░рд╛рдиреНрдЯреНрд░рдирд┐рд▓рд┐рдкреНрд░реЛрд▓ 0.4% рдЬреАрдЖрд░",
                    "рдПрдореЗрдореЗрдХреНрдЯрд┐рди рдмреЗрдВрдЬреЛрдПрдЯ 5% рдПрд╕рдЬреА",
                    "рд╕реНрдкрд┐рдиреЛрд╕реИрдб 45% рдПрд╕рд╕реА",
                    "рдЙрдЪрд┐рдд рдЦреБрд░рд╛рдХ рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рдЕрдзрд┐рдХрд╛рд░реА рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВ"
                ]
            }
        }
    };

    return mockResponses[language] || mockResponses['en'];
}