// Language Detection Utility for KrishiMitra
// Detects input language and returns appropriate language code

interface LanguagePattern {
    code: 'en' | 'hi' | 'ta' | 'te' | 'bn' | 'gu' | 'mr' | 'pa'
    patterns: RegExp[]
    keywords: string[]
    unicodeRanges: [number, number][]
}

const languagePatterns: LanguagePattern[] = [
    {
        code: 'hi',
        patterns: [
            /[\u0900-\u097F]/,  // Devanagari script
            /рдХреНрдпрд╛|рдХреИрд╕реЗ|рдХрдм|рдХрд╣рд╛рдБ|рдХреНрдпреЛрдВ|рдХреМрди|рдХрд┐рд╕рдХрд╛|рдХрд┐рд╕рдХреЛ|рдореИрдВ|рддреБрдо|рдЖрдк|рд╣реИ|рд╣реИрдВ|рдерд╛|рдереЗ|рд╣реЛрдЧрд╛|рд╣реЛрдВрдЧреЗ/,
        ],
        keywords: ['рдХреНрдпрд╛', 'рдХреИрд╕реЗ', 'рдХрдм', 'рдХрд╣рд╛рдБ', 'рдХреНрдпреЛрдВ', 'рдХреМрди', 'рдореИрдВ', 'рддреБрдо', 'рдЖрдк', 'рд╣реИ', 'рд╣реИрдВ', 'рдлрд╕рд▓', 'рдЦреЗрддреА', 'рдорд┐рдЯреНрдЯреА', 'рдЧреЗрд╣реВрдВ', 'рдЪрд╛рд╡рд▓'],
        unicodeRanges: [[0x0900, 0x097F]]
    },
    {
        code: 'ta',
        patterns: [
            /[\u0B80-\u0BFF]/,  // Tamil script
            /роОройрпНрой|роОрокрпНрокроЯро┐|роОрокрпНрокрпЛродрпБ|роОроЩрпНроХрпЗ|роПройрпН|ропро╛ро░рпН|роиро╛ройрпН|роирпА|роирпАроЩрпНроХро│рпН|роЗродрпБ|роЕродрпБ|роЙро│рпНро│родрпБ|роЗро░рпБроХрпНроХро┐ро▒родрпБ/,
        ],
        keywords: ['роОройрпНрой', 'роОрокрпНрокроЯро┐', 'роОрокрпНрокрпЛродрпБ', 'роОроЩрпНроХрпЗ', 'роПройрпН', 'ропро╛ро░рпН', 'роиро╛ройрпН', 'роирпА', 'ро╡ро┐ро╡роЪро╛ропроорпН', 'рокропро┐ро░рпН', 'роорогрпН', 'роХрпЛродрпБроорпИ'],
        unicodeRanges: [[0x0B80, 0x0BFF]]
    },
    {
        code: 'te',
        patterns: [
            /[\u0C00-\u0C7F]/,  // Telugu script
            /р░Пр░ор░┐р░Яр░┐|р░Ор░▓р░╛|р░Ор░кр▒Нр░кр▒Бр░бр▒Б|р░Ор░Хр▒Нр░Хр░б|р░Ор░Вр░жр▒Бр░Хр▒Б|р░Ор░╡р░░р▒Б|р░ир▒Зр░ир▒Б|р░ор▒Ар░░р▒Б|р░Зр░жр░┐|р░Ер░жр░┐|р░Йр░Вр░жр░┐|р░Йр░ир▒Нр░ир░╛р░пр░┐/,
        ],
        keywords: ['р░Пр░ор░┐р░Яр░┐', 'р░Ор░▓р░╛', 'р░Ор░кр▒Нр░кр▒Бр░бр▒Б', 'р░Ор░Хр▒Нр░Хр░б', 'р░Ор░Вр░жр▒Бр░Хр▒Б', 'р░Ор░╡р░░р▒Б', 'р░ир▒Зр░ир▒Б', 'р░ор▒Ар░░р▒Б', 'р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В', 'р░кр░Вр░Я', 'р░ор░Яр▒Нр░Яр░┐', 'р░Чр▒Лр░зр▒Бр░о'],
        unicodeRanges: [[0x0C00, 0x0C7F]]
    },
    {
        code: 'bn',
        patterns: [
            /[\u0980-\u09FF]/,  // Bengali script
            /ржХрж┐|ржХрзАржнрж╛ржмрзЗ|ржХржЦржи|ржХрзЛржерж╛ржпрж╝|ржХрзЗржи|ржХрзЗ|ржЖржорж┐|рждрзБржорж┐|ржЖржкржирж┐|ржПржЯрж┐|рж╕рзЗржЯрж┐|ржЖржЫрзЗ|рж░ржпрж╝рзЗржЫрзЗ/,
        ],
        keywords: ['ржХрж┐', 'ржХрзАржнрж╛ржмрзЗ', 'ржХржЦржи', 'ржХрзЛржерж╛ржпрж╝', 'ржХрзЗржи', 'ржХрзЗ', 'ржЖржорж┐', 'рждрзБржорж┐', 'ржХрзГрж╖рж┐', 'ржлрж╕рж▓', 'ржорж╛ржЯрж┐', 'ржЧржо'],
        unicodeRanges: [[0x0980, 0x09FF]]
    },
    {
        code: 'gu',
        patterns: [
            /[\u0A80-\u0AFF]/,  // Gujarati script
            /рк╢рлБркВ|ркХрлЗрк╡рлА рк░рлАркдрлЗ|ркХрлНркпрк╛рк░рлЗ|ркХрлНркпрк╛ркВ|рк╢рк╛ ркорк╛ркЯрлЗ|ркХрлЛркг|рк╣рлБркВ|ркдркорлЗ|ркЖ|ркдрлЗ|ркЫрлЗ|ркЫрлЗ/,
        ],
        keywords: ['рк╢рлБркВ', 'ркХрлЗрк╡рлА', 'ркХрлНркпрк╛рк░рлЗ', 'ркХрлНркпрк╛ркВ', 'рк╢рк╛', 'ркХрлЛркг', 'рк╣рлБркВ', 'ркдркорлЗ', 'ркЦрлЗркдрлА', 'рккрк╛ркХ', 'ркорк╛ркЯрлА', 'ркШркЙркВ'],
        unicodeRanges: [[0x0A80, 0x0AFF]]
    },
    {
        code: 'mr',
        patterns: [
            /[\u0900-\u097F]/,  // Devanagari script (same as Hindi but different keywords)
            /рдХрд╛рдп|рдХрд╕реЗ|рдХреЗрд╡реНрд╣рд╛|рдХреБрдареЗ|рдХрд╛|рдХреЛрдг|рдореА|рддреВ|рддреБрдореНрд╣реА|рд╣реЗ|рддреЗ|рдЖрд╣реЗ|рдЖрд╣реЗрдд/,
        ],
        keywords: ['рдХрд╛рдп', 'рдХрд╕реЗ', 'рдХреЗрд╡реНрд╣рд╛', 'рдХреБрдареЗ', 'рдХрд╛', 'рдХреЛрдг', 'рдореА', 'рддреВ', 'рд╢реЗрддреА', 'рдкреАрдХ', 'рдорд╛рддреА', 'рдЧрд╣реВ'],
        unicodeRanges: [[0x0900, 0x097F]]
    },
    {
        code: 'pa',
        patterns: [
            /[\u0A00-\u0A7F]/,  // Gurmukhi script
            /риХрйА|риХри┐ри╡рйЗриВ|риХрижрйЛриВ|риХри┐рй▒риерйЗ|риХри┐риЙриВ|риХрйМриг|риорйИриВ|ридрйБри╕рйАриВ|риЗри╣|риЙри╣|ри╣рйИ|ри╣рии/,
        ],
        keywords: ['риХрйА', 'риХри┐ри╡рйЗриВ', 'риХрижрйЛриВ', 'риХри┐рй▒риерйЗ', 'риХри┐риЙриВ', 'риХрйМриг', 'риорйИриВ', 'ридрйБри╕рйАриВ', 'риЦрйЗридрйАримри╛рйЬрйА', 'рилри╕ри▓', 'риори┐рй▒риЯрйА', 'риХригриХ'],
        unicodeRanges: [[0x0A00, 0x0A7F]]
    },
    {
        code: 'en',
        patterns: [
            /^[a-zA-Z\s\d.,!?;:()'-]+$/,  // English characters only
            /what|how|when|where|why|who|i|you|this|that|is|are|was|were/i,
        ],
        keywords: ['what', 'how', 'when', 'where', 'why', 'who', 'farming', 'crop', 'soil', 'wheat', 'rice'],
        unicodeRanges: [[0x0020, 0x007F], [0x00A0, 0x00FF]]
    }
]

/**
 * Detects the language of the input text
 * @param text - Input text to analyze
 * @returns Detected language code or 'en' as fallback
 */
export function detectInputLanguage(text: string): 'en' | 'hi' | 'ta' | 'te' | 'bn' | 'gu' | 'mr' | 'pa' {
    if (!text || text.trim().length === 0) {
        return 'en'
    }

    const cleanText = text.toLowerCase().trim()
    const scores: { [key: string]: number } = {}

    // Initialize scores
    languagePatterns.forEach(lang => {
        scores[lang.code] = 0
    })

    languagePatterns.forEach(lang => {
        let score = 0

        // Check Unicode ranges
        for (const char of text) {
            const charCode = char.charCodeAt(0)
            for (const [start, end] of lang.unicodeRanges) {
                if (charCode >= start && charCode <= end) {
                    score += 3 // High weight for script detection
                    break
                }
            }
        }

        // Check regex patterns
        lang.patterns.forEach(pattern => {
            if (pattern.test(text)) {
                score += 2
            }
        })

        // Check keywords
        lang.keywords.forEach(keyword => {
            const keywordLower = keyword.toLowerCase()
            if (cleanText.includes(keywordLower)) {
                score += 1
            }
        })

        scores[lang.code] = score
    })

    // Find the language with the highest score
    const detectedLang = Object.keys(scores).reduce((a, b) => 
        scores[a] > scores[b] ? a : b
    ) as 'en' | 'hi' | 'ta' | 'te' | 'bn' | 'gu' | 'mr' | 'pa'

    // Return detected language if score is above threshold, otherwise default to English
    return scores[detectedLang] > 0 ? detectedLang : 'en'
}

/**
 * Gets the confidence level of language detection
 * @param text - Input text to analyze
 * @returns Confidence percentage (0-100)
 */
export function getDetectionConfidence(text: string): number {
    if (!text || text.trim().length === 0) {
        return 0
    }

    const detectedLang = detectInputLanguage(text)
    const scores: { [key: string]: number } = {}

    languagePatterns.forEach(lang => {
        scores[lang.code] = 0
    })

    languagePatterns.forEach(lang => {
        let score = 0

        for (const char of text) {
            const charCode = char.charCodeAt(0)
            for (const [start, end] of lang.unicodeRanges) {
                if (charCode >= start && charCode <= end) {
                    score += 3
                    break
                }
            }
        }

        lang.patterns.forEach(pattern => {
            if (pattern.test(text)) {
                score += 2
            }
        })

        lang.keywords.forEach(keyword => {
            if (text.toLowerCase().includes(keyword.toLowerCase())) {
                score += 1
            }
        })

        scores[lang.code] = score
    })

    const maxScore = Math.max(...Object.values(scores))
    const totalScore = Object.values(scores).reduce((a, b) => a + b, 0)

    if (totalScore === 0) return 0

    return Math.round((scores[detectedLang] / maxScore) * 100)
}

/**
 * Checks if the detected language differs from the currently selected language
 * @param text - Input text to analyze
 * @param currentLanguage - Currently selected language
 * @returns Object with detection results
 */
export function checkLanguageMismatch(
    text: string, 
    currentLanguage: 'en' | 'hi' | 'ta' | 'te' | 'bn' | 'gu' | 'mr' | 'pa'
) {
    const detectedLang = detectInputLanguage(text)
    const confidence = getDetectionConfidence(text)
    
    return {
        detectedLanguage: detectedLang,
        currentLanguage,
        languageMismatch: detectedLang !== currentLanguage && confidence > 50,
        confidence,
        shouldSuggestChange: detectedLang !== currentLanguage && confidence > 70
    }
}

/**
 * Gets the display name for a language code
 * @param langCode - Language code
 * @returns Display name in English and native script
 */
export function getLanguageDisplayName(langCode: 'en' | 'hi' | 'ta' | 'te' | 'bn' | 'gu' | 'mr' | 'pa'): string {
    const names = {
        'en': 'ЁЯЗ║ЁЯЗ╕ English',
        'hi': 'ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА (Hindi)',
        'ta': 'ЁЯЗоЁЯЗ│ родрооро┐ро┤рпН (Tamil)',
        'te': 'ЁЯЗоЁЯЗ│ р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)',
        'bn': 'ЁЯЗзЁЯЗй ржмрж╛ржВрж▓рж╛ (Bengali)',
        'gu': 'ЁЯЗоЁЯЗ│ ркЧрлБркЬрк░рк╛ркдрлА (Gujarati)',
        'mr': 'ЁЯЗоЁЯЗ│ рдорд░рд╛рдареА (Marathi)',
        'pa': 'ЁЯЗоЁЯЗ│ рикрй░риЬри╛римрйА (Punjabi)'
    }
    return names[langCode] || names.en
}