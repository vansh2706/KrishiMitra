// Google Gemini API integration for KrishiMitra
'use client'

// Define types directly in this file
export interface ChatMessage {
    role: 'system' | 'user' | 'assistant'
    content: string
}

export interface GeminiResponse {
    choices: Array<{
        message: {
            content: string
        }
    }>
    citations?: string[]
}

export interface GeminiRequest {
    model: string
    messages: ChatMessage[]
    temperature?: number
    max_tokens?: number
}

// Main chat function using Gemini with enhanced agricultural prompts
export async function geminiChat(request: GeminiRequest, language: string = 'en'): Promise<GeminiResponse> {
    try {
        // Call our serverless function instead of calling Gemini directly
        const response = await fetch('/api/gemini', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                messages: request.messages,
                model: request.model || 'gemini-pro',
                temperature: request.temperature,
                maxTokens: request.max_tokens,
            }),
        })

        if (!response.ok) {
            // Handle specific error cases
            if (response.status === 429) {
                throw new Error('You have exceeded your daily AI request limit. Please try again later.')
            } else if (response.status === 500) {
                const errorData = await response.json().catch(() => ({}));
                if (errorData.error && errorData.error.includes('quota')) {
                    throw new Error('You have exceeded your daily AI request limit. Please try again tomorrow when your quota resets.')
                }
                throw new Error('AI service is temporarily unavailable. Please try again later.')
            } else {
                throw new Error(`HTTP error! status: ${response.status}`)
            }
        }

        const data = await response.json()
        return data
    } catch (error) {
        console.error('Gemini Chat API Error:', error)
        // Fallback to mock response on error
        return getMockResponse(request, language)
    }
}

// Function to check if Gemini services are properly configured
export function checkGeminiServices() {
    // In production, we'll assume the service is available and let the API call handle any errors
    // In development, we can check if the API key is set
    if (typeof window !== 'undefined') {
        // Client-side check
        const isDevelopment = process.env.NODE_ENV === 'development';
        if (isDevelopment) {
            // In development, check if we have the public API key
            return {
                chatbot: !!(process.env.NEXT_PUBLIC_GEMINI_API_KEY &&
                    process.env.NEXT_PUBLIC_GEMINI_API_KEY !== 'your_gemini_api_key_here'),
                speechToText: true,
                textToSpeech: true
            };
        } else {
            // In production, assume service is available
            return {
                chatbot: true,
                speechToText: true,
                textToSpeech: true
            };
        }
    }

    // Server-side (this should never be called from server-side)
    return {
        chatbot: true,
        speechToText: true,
        textToSpeech: true
    };
}

// Function for image analysis using OpenAI Vision API with Gemini fallback
export async function geminiImageAnalysis(imageData: string, language: string = 'en') {
    try {
        // Call our serverless function for pest analysis (now uses OpenAI primary with Gemini fallback)
        const response = await fetch('/api/analyze-pest', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                imageData: imageData,
                language: language
            }),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Image Analysis Error:', error);
        // Return a mock response on error
        return getMockImageAnalysisResponse(language);
    }
}

// Text-to-speech function using browser APIs
export async function playTTSAudio(text: string, voice?: string): Promise<void> {
    try {
        // Use browser's built-in speech synthesis
        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(text);

            // Set voice based on language preference
            const voices = speechSynthesis.getVoices();
            if (voice) {
                const selectedVoice = voices.find(v => v.name.toLowerCase().includes(voice.toLowerCase()));
                if (selectedVoice) {
                    utterance.voice = selectedVoice;
                }
            }

            // Set default properties
            utterance.rate = 1.0;
            utterance.pitch = 1.0;
            utterance.volume = 1.0;

            // Speak the text
            speechSynthesis.speak(utterance);
        } else {
            console.warn('Speech synthesis not supported in this browser');
        }
    } catch (error) {
        console.error('Text-to-speech error:', error);
    }
}

// Mock implementation for development and fallback
function getMockResponse(request: GeminiRequest, language: string = 'en'): GeminiResponse {
    const userMessage = request.messages.find((msg: ChatMessage) => msg.role === 'user')?.content || ''
    const mockResponse = generateMockResponse(userMessage, language)

    return {
        choices: [{
            message: {
                content: mockResponse
            }
        }],
        citations: [
            'https://krishi.mit.gov.in/',
            'https://www.icar.org.in/',
            'https://agricoop.nic.in/'
        ]
    }
}

function generateMockResponse(question: string, language: string): string {
    const lowerQuestion = question.toLowerCase()

    // Language-specific responses based on detected language
    if (language === 'hi') {
        if (lowerQuestion.includes('рдЧреЗрд╣реВрдВ') || lowerQuestion.includes('wheat')) {
            return `ЁЯМ╛ рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рд╕рдВрдкреВрд░реНрдг рдЧрд╛рдЗрдб:

1. **рдмреБрд╡рд╛рдИ рдХрд╛ рд╕рдордп**: рдЕрдХреНрдЯреВрдмрд░-рдирд╡рдВрдмрд░ (рд░рдмреА рд╕реАрдЬрди)
2. **рдмреАрдЬ рджрд░**: 100-120 рдХрд┐рд▓реЛ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
3. **рдЙрд░реНрд╡рд░рдХ**: NPK (120:60:40) рдХрд┐рд▓реЛ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
4. **рд╕рд┐рдВрдЪрд╛рдИ**: 4-6 рд╕рд┐рдВрдЪрд╛рдИ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛
5. **рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг**: рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА, рдиреАрдо рдХрд╛ рддреЗрд▓
6. **рдХрдЯрд╛рдИ**: 120-130 рджрд┐рди рдореЗрдВ рддреИрдпрд╛рд░

ЁЯТб рдЙрддреНрдкрд╛рджрди: 25-30 рдХреНрд╡рд┐рдВрдЯрд▓ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
ЁЯУЮ рд╕рд▓рд╛рд╣: рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рд╡рд┐рднрд╛рдЧ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред`
        }

        if (lowerQuestion.includes('рдЯрдорд╛рдЯрд░') || lowerQuestion.includes('tomato')) {
            return `ЁЯНЕ рдЯрдорд╛рдЯрд░ рдХреА рд╕рдВрдкреВрд░реНрдг рджреЗрдЦрднрд╛рд▓:

1. **рдореМрд╕рдо**: рд╕рд╛рд▓ рднрд░ (рд╕рд┐рдВрдЪрд┐рдд рдХреНрд╖реЗрддреНрд░)
2. **рддрд╛рдкрдорд╛рди**: 20-25┬░C рдЖрджрд░реНрд╢
3. **рдорд┐рдЯреНрдЯреА**: рджреЛрдордЯ рдорд┐рдЯреНрдЯреА, pH 6.0-7.0
4. **рдкрд╛рдиреА рдкреНрд░рдмрдВрдзрди**: рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ рд╕рд░реНрд╡реЛрддреНрддрдо
5. **рдореБрдЦреНрдп рд░реЛрдЧ**: рдЕрдЧреЗрддреА рдЭреБрд▓рд╕рд╛, рдкрдЫреЗрддреА рдЭреБрд▓рд╕рд╛
6. **рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг**: рдиреАрдо рдХрд╛ рддреЗрд▓ рдЫрд┐рдбрд╝рдХрд╛рд╡
7. **рдХрдЯрд╛рдИ**: 70-80 рджрд┐рди рдореЗрдВ рдлрд▓ рддреИрдпрд╛рд░

ЁЯТ░ рдЙрддреНрдкрд╛рджрди: 300-500 рдХреНрд╡рд┐рдВрдЯрд▓ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░
тЬи рд╕рдлрд▓ рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдирд┐рдпрдорд┐рдд рджреЗрдЦрднрд╛рд▓ рдЬрд░реВрд░реА рд╣реИред`
        }

        return `ЁЯЩП рдЖрдкрдХреЗ рдХреГрд╖рд┐ рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!

рдпрд╣рд╛рдБ рдХреБрдЫ рд╕рд╛рдорд╛рдиреНрдп рдЦреЗрддреА рдХреЗ рд╕реБрдЭрд╛рд╡ рд╣реИрдВ:

1. **рдорд┐рдЯреНрдЯреА рдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп**: рдирд┐рдпрдорд┐рдд рдЬрд╛рдВрдЪ рдФрд░ рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдХрд╛ рдЙрдкрдпреЛрдЧ
2. **рдлрд╕рд▓ рдЪрдХреНрд░**: рдмреЗрд╣рддрд░ рдкреИрджрд╛рд╡рд╛рд░ рдХреЗ рд▓рд┐рдП рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ
3. **рдкрд╛рдиреА рдХрд╛ рдкреНрд░рдмрдВрдзрди**: рдХреБрд╢рд▓ рд╕рд┐рдВрдЪрд╛рдИ рдкреНрд░рдгрд╛рд▓реА рдЕрдкрдирд╛рдПрдВ
4. **рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг**: рдПрдХреАрдХреГрдд рдХреАрдЯ рдкреНрд░рдмрдВрдзрди (IPM) рдЕрдкрдирд╛рдПрдВ
5. **рдореМрд╕рдо рдЖрдзрд╛рд░рд┐рдд рд╕рд▓рд╛рд╣**: рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА рд░рдЦреЗрдВ

ЁЯТб рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕рд▓рд╛рд╣ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдлрд╕рд▓ рдФрд░ рд╕реНрдерд╛рди рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░реЗрдВред

ЁЯУ▒ рдЕрдиреНрдп рдЯреВрд▓реНрд╕ рдХрд╛ рднреА рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ: рдореМрд╕рдо рдбреИрд╢рдмреЛрд░реНрдб, рдорд┐рдЯреНрдЯреА рдЧрд╛рдЗрдб, рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдпред`
    }

    // Tamil responses
    if (language === 'ta') {
        if (lowerQuestion.includes('роирпЖро▓рпН') || lowerQuestion.includes('rice')) {
            return `ЁЯМ╛ роирпЖро▓рпН роЪро╛роХрпБрокроЯро┐ ро╡ро┤ро┐роХро╛роЯрпНроЯро┐:

1. **ро╡ро┐родрпИрокрпНрокрпБ роХро╛ро▓роорпН**: роЬрпВройрпН-роЬрпВро▓рпИ (роХро░рпАроГрокрпН)
2. **ро╡ро┐родрпИ роЕро│ро╡рпБ**: ро╣рпЖроХрпНроЯрпЗро░рпБроХрпНроХрпБ 20-25 роХро┐ро▓рпЛ
3. **роЙро░роорпН**: NPK (120:60:40)
4. **роирпАро░рпН роорпЗро▓ро╛рогрпНроорпИ**: родрпКроЯро░рпНроирпНродрпБ роирпАро░рпН родрпЗро╡рпИ
5. **рокрпВроЪрпНроЪро┐ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ**: родрогрпНроЯрпБ родрпБро│рпИрокрпНрокро╛ройрпН, роЗро▓рпИ роЪрпБро░рпБроЯрпНроЯрпБрокрпНрокрпВроЪрпНроЪро┐
6. **роЕро▒рпБро╡роЯрпИ**: 120-130 роиро╛роЯрпНроХро│ро┐ро▓рпН

ЁЯТ░ роороХроЪрпВро▓рпН: ро╣рпЖроХрпНроЯрпЗро░рпБроХрпНроХрпБ 40-50 роХрпНро╡ро┐ройрпНроЯро╛ро▓рпН
ЁЯМ┐ роЗропро▒рпНроХрпИ роЙро░роЩрпНроХро│рпИ рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпНред`
        }
        return `ЁЯЩП роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп роХрпЗро│рпНро╡ро┐роХрпНроХрпБ роиройрпНро▒ро┐!

рокрпКродрпБро╡ро╛рой ро╡ро┐ро╡роЪро╛роп роЖро▓рпЛроЪройрпИроХро│рпН:

1. **роорогрпН роЖро░рпЛроХрпНроХро┐ропроорпН**: ро╡ро┤роХрпНроХрооро╛рой рокро░ро┐роЪрпЛродройрпИ
2. **рокропро┐ро░рпН роЪрпБро┤ро▒рпНроЪро┐**: роЪро┐ро▒роирпНрод роороХроЪрпВро▓рпБроХрпНроХрпБ
3. **роирпАро░рпН роорпЗро▓ро╛рогрпНроорпИ**: родро┐ро▒роорпИропро╛рой роирпАро░рпНрокрпНрокро╛роЪройроорпН
4. **рокрпВроЪрпНроЪро┐ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ**: роТро░рпБроЩрпНроХро┐рогрпИроирпНрод рокрпВроЪрпНроЪро┐ роорпЗро▓ро╛рогрпНроорпИ

ЁЯУ▒ рооро▒рпНро▒ роХро░рпБро╡ро┐роХро│рпИропрпБроорпН рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпНред`
    }

    // Telugu responses
    if (language === 'te') {
        if (lowerQuestion.includes('р░╡р░░р░┐') || lowerQuestion.includes('rice')) {
            return `ЁЯМ╛ р░╡р░░р░┐ р░╕р░╛р░Чр▒Б р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░В:

1. **р░╡р░┐р░др▒Нр░др░ир░╛р░▓р▒Б**: р░Ьр▒Вр░ир▒Н-р░Ьр▒Вр░▓р▒И (р░Цр░░р▒Ар░лр▒Н)
2. **р░╡р░┐р░др▒Нр░др░и р░ор▒Кр░др▒Нр░др░В**: р░╣р▒Жр░Хр▒Нр░Яр▒Зр░░р▒Бр░Хр▒Б 20-25 р░Хр░┐р░▓р▒Лр░▓р▒Б
3. **р░Ор░░р▒Бр░╡р▒Бр░▓р▒Б**: NPK (120:60:40)
4. **р░ир▒Ар░Яр░┐ р░ир░┐р░░р▒Нр░╡р░╣р░г**: р░ир░┐р░░р░Вр░др░░ р░ир▒Ар░░р▒Б р░Ер░╡р░╕р░░р░В
5. **р░др▒Жр░Чр▒Бр░│р▒Нр░▓ р░ир░┐р░пр░Вр░др▒Нр░░р░г**: р░Хр░╛р░Вр░бр░В р░мр▒Лр░░р░░р▒Н, р░Жр░Хр▒Б р░ор░бр░др░кр▒Бр░░р▒Бр░Чр▒Б
6. **р░Хр▒Лр░д**: 120-130 р░░р▒Лр░Ьр▒Бр░▓р▒Нр░▓р▒Л

ЁЯТ░ р░жр░┐р░Чр▒Бр░мр░бр░┐: р░╣р▒Жр░Хр▒Нр░Яр▒Зр░░р▒Бр░Хр▒Б 40-50 р░Хр▒Нр░╡р░┐р░Вр░Яр░╛р░▓р▒Нр░╕р▒Н
ЁЯМ┐ р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░Ор░░р▒Бр░╡р▒Бр░▓р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐ред`
        }
        return `ЁЯЩП р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр▒Нр░░р░╢р▒Нр░ир░Хр▒Б р░зр░ир▒Нр░пр░╡р░╛р░жр░╛р░▓р▒Б!

р░╕р░╛р░зр░╛р░░р░г р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░▓р░╣р░╛р░▓р▒Б:

1. **р░ир▒Зр░▓ р░Жр░░р▒Лр░Чр▒Нр░пр░В**: р░ир░┐р░пр░ор░┐р░д р░кр░░р▒Ар░Хр▒Нр░╖р░▓р▒Б
2. **р░кр░Вр░Я р░ор░╛р░░р▒Нр░кр░┐р░бр░┐**: р░ор▒Жр░░р▒Бр░Чр▒Ир░и р░жр░┐р░Чр▒Бр░мр░бр░┐ р░Хр▒Лр░╕р░В
3. **р░ир▒Ар░Яр░┐ р░ир░┐р░░р▒Нр░╡р░╣р░г**: р░╕р░ор░░р▒Нр░ер░╡р░Вр░др░ор▒Ир░и р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓
4. **р░др▒Жр░Чр▒Бр░│р▒Нр░▓ р░ир░┐р░пр░Вр░др▒Нр░░р░г**: р░╕р░ор▒Ар░Хр▒Гр░д р░др▒Жр░Чр▒Бр░│р▒Нр░▓ р░ир░┐р░░р▒Нр░╡р░╣р░г

ЁЯУ▒ р░Зр░др░░ р░Яр▒Вр░▓р▒Нр░╕р▒Н р░Хр▒Вр░бр░╛ р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐ред`
    }

    // English responses
    if (lowerQuestion.includes('fertilizer') || lowerQuestion.includes('soil')) {
        return `ЁЯМ▒ Soil and Fertilizer Management Guide:

1. **Soil Testing**: Get soil tested every 2-3 years
2. **Organic Matter**: Add 5-10 tonnes compost per hectare
3. **NPK Balance**: Apply based on soil test results
4. **pH Management**: Maintain pH between 6.0-7.5
5. **Micronutrients**: Apply zinc, boron as needed
6. **Timing**: Apply fertilizers at right growth stages

ЁЯТб **Pro Tips**:
- Use bio-fertilizers for sustainable farming
- Practice green manuring
- Avoid over-fertilization

ЁЯУЮ Consult local agricultural experts for soil-specific advice.`
    }

    if (lowerQuestion.includes('irrigation') || lowerQuestion.includes('water')) {
        return `ЁЯТз Smart Irrigation Practices:

1. **Timing**: Early morning (6-8 AM) or evening (4-6 PM)
2. **Frequency**: Based on soil moisture and crop stage
3. **Methods**: 
   - Drip irrigation (90% efficiency)
   - Sprinkler system (75-85% efficiency)
   - Furrow irrigation (60-70% efficiency)
4. **Water Quality**: EC should be < 2.0 dS/m
5. **Scheduling**: Use tensiometers for precise timing

ЁЯОп **Benefits**:
- 20-30% water savings
- Better crop yield
- Reduced disease incidence

ЁЯТб Consider mulching to reduce water evaporation.`
    }

    if (lowerQuestion.includes('pest') || lowerQuestion.includes('insect')) {
        return `ЁЯРЫ Integrated Pest Management (IPM):

1. **Prevention First**:
   - Crop rotation
   - Resistant varieties
   - Clean cultivation

2. **Monitoring**:
   - Weekly field inspection
   - Pheromone traps
   - Yellow sticky traps

3. **Biological Control**:
   - Beneficial insects
   - Neem-based pesticides
   - Bacillus thuringiensis

4. **Chemical Control** (last resort):
   - Use recommended pesticides
   - Follow label instructions
   - Maintain pre-harvest interval

ЁЯМ┐ **Organic Options**: Neem oil, garlic spray, soap solution
тЪая╕П Always wear protective equipment when spraying.`
    }

    // Default comprehensive response
    return `ЁЯМ╛ **Agricultural Guidance System**

Thank you for your farming question! Here's comprehensive advice:

**ЁЯМ▒ Soil Health**:
- Regular soil testing
- Organic matter addition
- Balanced fertilization

**ЁЯТз Water Management**:
- Efficient irrigation systems
- Rainwater harvesting
- Mulching practices

**ЁЯЫбя╕П Crop Protection**:
- Integrated pest management
- Disease monitoring
- Preventive measures

**ЁЯУИ Yield Optimization**:
- Quality seeds/seedlings
- Proper spacing
- Timely operations

**ЁЯМР Modern Techniques**:
- Precision farming
- Weather-based advisories
- Mobile apps for guidance

ЁЯТб **For specific advice**, please provide:
- Your location/state
- Crop type and variety
- Current growth stage
- Specific problem/concern

ЁЯУ▒ **Use other tools**: Weather Dashboard, Soil Guide, Market Prices, Pest Detection`
}

// Mock response for image analysis with varied responses for testing
function getMockImageAnalysisResponse(language: string = 'en') {
    // Language-specific mock responses arrays for variety
    const mockResponseArrays: Record<string, any[]> = {
        en: [
            {
                success: true,
                result: {
                    pestName: "Fall Armyworm",
                    confidence: 85,
                    severity: "high",
                    description: "The Fall Armyworm is a serious pest that affects corn, sorghum, and other crops.",
                    symptoms: [
                        "Large irregular holes in leaves",
                        "Windowing damage on young leaves",
                        "Presence of caterpillars on plants",
                        "Frass (insect waste) on leaves"
                    ],
                    treatment: [
                        "Apply Bacillus thuringiensis (Bt) spray",
                        "Use neem oil solution (2 ml per liter water)",
                        "Introduce beneficial insects like Trichogramma wasps",
                        "Remove and destroy affected plant parts"
                    ],
                    prevention: [
                        "Regular field monitoring",
                        "Destroy crop residues after harvest",
                        "Plant trap crops like marigold",
                        "Maintain proper field sanitation"
                    ],
                    cropsDamaged: ["Corn", "Sorghum", "Rice", "Wheat"],
                    seasonality: "Active during warm, humid months",
                    organicTreatment: [
                        "Neem oil spray (2 ml per liter water)",
                        "Garlic-chili spray",
                        "Beneficial insect release",
                        "Companion planting with marigold"
                    ],
                    chemicalTreatment: [
                        "Chlorantraniliprole 0.4% GR",
                        "Emamectin benzoate 5% SG",
                        "Spinosad 45% SC",
                        "Consult local agricultural officer for proper dosage"
                    ]
                }
            },
            {
                success: true,
                result: {
                    pestName: "Aphids",
                    confidence: 80,
                    severity: "medium",
                    description: "Small soft-bodied insects that feed on plant sap.",
                    symptoms: [
                        "Yellowing leaves",
                        "Sticky honeydew deposits",
                        "Curled leaves",
                        "Stunted growth"
                    ],
                    treatment: [
                        "Spray with water",
                        "Apply neem oil",
                        "Use insecticidal soap",
                        "Introduce ladybugs"
                    ],
                    prevention: [
                        "Remove weeds",
                        "Encourage beneficial insects",
                        "Regular monitoring",
                        "Proper plant spacing"
                    ],
                    cropsDamaged: ["Tomato", "Potato", "Cotton", "Wheat"],
                    seasonality: "Spring and summer months",
                    organicTreatment: [
                        "Neem oil spray",
                        "Ladybug release",
                        "Garlic spray",
                        "Companion planting"
                    ],
                    chemicalTreatment: [
                        "Imidacloprid",
                        "Thiamethoxam",
                        "Acetamiprid",
                        "Consult local agricultural officer"
                    ]
                }
            },
            {
                success: true,
                result: {
                    pestName: "Whitefly",
                    confidence: 75,
                    severity: "medium",
                    description: "Small white flying insects that suck plant juices.",
                    symptoms: [
                        "Yellowing leaves",
                        "Sooty mold",
                        "Reduced vigor",
                        "Sticky honeydew"
                    ],
                    treatment: [
                        "Yellow sticky traps",
                        "Reflective mulch",
                        "Neem oil",
                        "Insecticidal soap"
                    ],
                    prevention: [
                        "Crop rotation",
                        "Remove infected plants",
                        "Companion planting",
                        "Proper ventilation"
                    ],
                    cropsDamaged: ["Cotton", "Tomato", "Potato", "Sugarcane"],
                    seasonality: "Year-round in warm climates",
                    organicTreatment: [
                        "Insecticidal soap",
                        "Reflective mulch",
                        "Beneficial insects",
                        "Neem oil"
                    ],
                    chemicalTreatment: [
                        "Spiromesifen",
                        "Pyriproxyfen",
                        "Buprofezin",
                        "Consult expert for dosage"
                    ]
                }
            }
        ],
        hi: [
            {
                success: true,
                result: {
                    pestName: "рдЦрд░реАрдл рдЖрд░реНрдореАрд╡рд░реНрдо",
                    confidence: 85,
                    severity: "high",
                    description: "рдЦрд░реАрдл рдЖрд░реНрдореАрд╡рд░реНрдо рдПрдХ рдЧрдВрднреАрд░ рдХреАрдЯ рд╣реИ рдЬреЛ рдордХрдИ, рдЬреНрд╡рд╛рд░ рдФрд░ рдЕрдиреНрдп рдлрд╕рд▓реЛрдВ рдХреЛ рдкреНрд░рднрд╛рд╡рд┐рдд рдХрд░рддрд╛ рд╣реИред",
                    symptoms: [
                        "рдкрддреНрддрд┐рдпреЛрдВ рдореЗрдВ рдмрдбрд╝реЗ рдЕрдирд┐рдпрдорд┐рдд рдЫреЗрдж",
                        "рдирдП рдкрддреНрддреЛрдВ рдкрд░ рдЦрд┐рдбрд╝рдХреА рджреБрд╖реНрдЯрддрд╛",
                        "рдкреМрдзреЛрдВ рдкрд░ рдЗрд▓реНрд▓реА рдХреА рдЙрдкрд╕реНрдерд┐рддрд┐",
                        "рдкрддреНрддреЛрдВ рдкрд░ рдлреНрд░рд╛рд╕ (рдХреАрдЯ рдХрдЪрд░рд╛)"
                    ],
                    treatment: [
                        "рдмреИрд╕рд┐рд▓рд╕ рдереБрд░рд┐рдВрдЬрд┐рдПрдВрд╕рд┐рд╕ (рдмреАрдЯреА) рд╕реНрдкреНрд░реЗ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ",
                        "рдиреАрдо рддреЗрд▓ рдШреЛрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ (2 рдорд┐рд▓реА рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА)",
                        "рдЯреНрд░рд╛рдЗрдХреЛрдЧреНрд░рд╛рдорд╛ рд╡рд╛рд╕реНрдк рдЬреИрд╕реЗ рд▓рд╛рднрдХрд╛рд░реА рдХреАрдЯреЛрдВ рдХреЛ рдкреЗрд╢ рдХрд░реЗрдВ",
                        "рдкреНрд░рднрд╛рд╡рд┐рдд рдкреМрдзреЗ рдХреЗ рд╣рд┐рд╕реНрд╕реЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдВ рдФрд░ рдирд╖реНрдЯ рдХрд░реЗрдВ"
                    ],
                    prevention: [
                        "рдирд┐рдпрдорд┐рдд рдЦреЗрдд рдирд┐рдЧрд░рд╛рдиреА",
                        "рдХрдЯрд╛рдИ рдХреЗ рдмрд╛рдж рдлрд╕рд▓ рдЕрд╡рд╢реЗрд╖реЛрдВ рдХреЛ рдирд╖реНрдЯ рдХрд░реЗрдВ",
                        "рдореИрд░рд┐рдЧреЛрд▓реНрдб рдЬреИрд╕реА рдлрд╕рд▓ рд▓рдЧрд╛рдПрдВ",
                        "рдЙрдЪрд┐рдд рдЦреЗрдд рд╕реНрд╡рдЪреНрдЫрддрд╛ рдмрдирд╛рдП рд░рдЦреЗрдВ"
                    ],
                    cropsDamaged: ["рдордХрдИ", "рдЬреНрд╡рд╛рд░", "рдЪрд╛рд╡рд▓", "рдЧреЗрд╣реВрдВ"],
                    seasonality: "рдЧрд░реНрдо, рдЖрд░реНрджреНрд░ рдорд╣реАрдиреЛрдВ рдХреЗ рджреМрд░рд╛рди рд╕рдХреНрд░рд┐рдп",
                    organicTreatment: [
                        "рдиреАрдо рддреЗрд▓ рд╕реНрдкреНрд░реЗ (2 рдорд┐рд▓реА рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА)",
                        "рд▓рд╣рд╕реБрди-рдорд┐рд░реНрдЪ рд╕реНрдкреНрд░реЗ",
                        "рд▓рд╛рднрдХрд╛рд░реА рдХреАрдЯ рд░рд┐рд▓реАрдЬрд╝",
                        "рдореИрд░рд┐рдЧреЛрд▓реНрдб рдХреЗ рд╕рд╛рде рд╕рд╣рдЪрд░ рдЦреЗрддреА"
                    ],
                    chemicalTreatment: [
                        "рдХреНрд▓реЛрд░рд╛рдиреНрдЯреНрд░рдирд┐рд▓рд┐рдкреНрд░реЛрд▓ 0.4% рдЬреАрдЖрд░",
                        "рдПрдореЗрдореЗрдХреНрдЯрд┐рди рдмреЗрдВрдЬреЛрдПрдЯ 5% рдПрд╕рдЬреА",
                        "рд╕реНрдкрд┐рдиреЛрд╕реИрдб 45% рдПрд╕рд╕реА",
                        "рдЙрдЪрд┐рдд рдЦреБрд░рд╛рдХ рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рдЕрдзрд┐рдХрд╛рд░реА рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВ"
                    ]
                }
            },
            {
                success: true,
                result: {
                    pestName: "рдорд╛рд╣реВ (Aphids)",
                    confidence: 80,
                    severity: "medium",
                    description: "рдЫреЛрдЯреЗ рдХреЛрдорд▓ рд╢рд░реАрд░ рд╡рд╛рд▓реЗ рдХреАрдбрд╝реЗ рдЬреЛ рдкреМрдзреЛрдВ рдХрд╛ рд░рд╕ рдЪреВрд╕рддреЗ рд╣реИрдВред",
                    symptoms: [
                        "рдкрддреНрддрд┐рдпреЛрдВ рдХрд╛ рдкреАрд▓рд╛ рд╣реЛрдирд╛",
                        "рдЪрд┐рдкрдЪрд┐рдкрд╛ рдкрджрд╛рд░реНрде",
                        "рдореБрдбрд╝реА рд╣реБрдИ рдкрддреНрддрд┐рдпрд╛рдБ",
                        "рдмреМрдиреА рд╡реГрджреНрдзрд┐"
                    ],
                    treatment: [
                        "рдкрд╛рдиреА рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡",
                        "рдиреАрдо рддреЗрд▓ рд▓рдЧрд╛рдПрдВ",
                        "рдХреАрдЯрдирд╛рд╢рдХ рд╕рд╛рдмреБрди рдХрд╛ рдЙрдкрдпреЛрдЧ",
                        "рд▓реЗрдбреАрдмрдЧ рдЬрд╛рд░реА рдХрд░реЗрдВ"
                    ],
                    prevention: [
                        "рдЦрд░рдкрддрд╡рд╛рд░ рд╣рдЯрд╛рдПрдВ",
                        "рд▓рд╛рднрдХрд╛рд░реА рдХреАрдЯреЛрдВ рдХреЛ рдмрдврд╝рд╛рд╡рд╛ рджреЗрдВ",
                        "рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА",
                        "рдЙрдЪрд┐рдд рдкреМрдз рджреВрд░реА"
                    ],
                    cropsDamaged: ["рдЯрдорд╛рдЯрд░", "рдЖрд▓реВ", "рдХрдкрд╛рд╕", "рдЧреЗрд╣реВрдВ"],
                    seasonality: "рд╡рд╕рдВрдд рдФрд░ рдЧрд░реНрдореА рдХреЗ рдорд╣реАрдиреЗ",
                    organicTreatment: [
                        "рдиреАрдо рддреЗрд▓ рд╕реНрдкреНрд░реЗ",
                        "рд▓реЗрдбреАрдмрдЧ рд░рд┐рд▓реАрдЬрд╝",
                        "рд▓рд╣рд╕реБрди рд╕реНрдкреНрд░реЗ",
                        "рд╕рд╣рдЪрд░ рдЦреЗрддреА"
                    ],
                    chemicalTreatment: [
                        "рдЗрдорд┐рдбрд╛рдХреНрд▓реЛрдкреНрд░рд┐рдб",
                        "рдерд╛рдпрд╛рдореЗрдереЙрдХреНрд╕рд╛рдо",
                        "рдПрд╕рд┐рдЯрд╛рдорд┐рдкреНрд░рд┐рдб",
                        "рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рдЕрдзрд┐рдХрд╛рд░реА рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВ"
                    ]
                }
            },
            {
                success: true,
                result: {
                    pestName: "рд╕рдлреЗрдж рдордХреНрдЦреА (Whitefly)",
                    confidence: 75,
                    severity: "medium",
                    description: "рдЫреЛрдЯреА рд╕рдлреЗрдж рдЙрдбрд╝рдиреЗ рд╡рд╛рд▓реА рдордХреНрдЦрд┐рдпрд╛рдБ рдЬреЛ рдкреМрдзреЛрдВ рдХрд╛ рд░рд╕ рдЪреВрд╕рддреА рд╣реИрдВред",
                    symptoms: [
                        "рдкрддреНрддрд┐рдпреЛрдВ рдХрд╛ рдкреАрд▓рд╛ рд╣реЛрдирд╛",
                        "рдХрд╛рд▓реА рдлрдлреВрдВрдж",
                        "рдХрдо рддрд╛рдХрдд",
                        "рдЪрд┐рдкрдЪрд┐рдкрд╛ рдкрджрд╛рд░реНрде"
                    ],
                    treatment: [
                        "рдкреАрд▓реЗ рдЪрд┐рдкрдХрдиреЗ рд╡рд╛рд▓реЗ рдЬрд╛рд▓",
                        "рдкрд░рд╛рд╡рд░реНрддрдХ рдорд▓реНрдЪ",
                        "рдиреАрдо рддреЗрд▓",
                        "рдХреАрдЯрдирд╛рд╢рдХ рд╕рд╛рдмреБрди"
                    ],
                    prevention: [
                        "рдлрд╕рд▓ рдЪрдХреНрд░",
                        "рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдВ",
                        "рд╕рд╛рдереА рдлрд╕рд▓",
                        "рдЙрдЪрд┐рдд рд╕рдВрд╡рд╛рддрди"
                    ],
                    cropsDamaged: ["рдХрдкрд╛рд╕", "рдЯрдорд╛рдЯрд░", "рдЖрд▓реВ", "рдЧрдиреНрдирд╛"],
                    seasonality: "рдЧрд░реНрдо рдЬрд▓рд╡рд╛рдпреБ рдореЗрдВ рд╕рд╛рд▓ рднрд░",
                    organicTreatment: [
                        "рдХреАрдЯрдирд╛рд╢рдХ рд╕рд╛рдмреБрди",
                        "рдкрд░рд╛рд╡рд░реНрддрдХ рдорд▓реНрдЪ",
                        "рд▓рд╛рднрдХрд╛рд░реА рдХреАрдбрд╝реЗ",
                        "рдиреАрдо рддреЗрд▓"
                    ],
                    chemicalTreatment: [
                        "рд╕реНрдкрд┐рд░реЛрдореЗрд╕рд┐рдлреЗрди",
                        "рдкрд╛рдпрд░рд┐рдкреНрд░реЙрдХреНрд╕рд┐рдлреЗрди",
                        "рдмреБрдкреНрд░реЛрдлреЗрдЬрд╝рд┐рди",
                        "рдЦреБрд░рд╛рдХ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВ"
                    ]
                }
            }
        ]
    };

    // Select a random response from the array
    const responses = mockResponseArrays[language] || mockResponseArrays['en'];
    const randomIndex = Math.floor(Math.random() * responses.length);

    return responses[randomIndex];
}